
package iles;

import bot.Joueur;
import de.Face;
import de.Ressource;
import de.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;
import partie.Tours;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.*;

@SuppressWarnings("ALL")
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TestExploit extends TestExploit2 {


  @Test(timeout = 4000)
  public void test05() {
      Random.setNextRandom((-3371));
      Joueur joueur0 = new Joueur();
      assertNotNull(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      Exploit.effetSabots(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      Exploit.effetSabots(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
  }


  @Test(timeout = 4000)
  public void test07() {
      TypeEffet typeEffet0 = TypeEffet.PERMANENT;
      Prix prix0 = new Prix(182, 10);
      assertNotNull(prix0);
      assertEquals(0, prix0.getPrix());
      
      Exploit exploit0 = new Exploit(null, typeEffet0, prix0);
      assertNotNull(exploit0);
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      
      Joueur joueur0 = new Joueur();
      assertNotNull(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      Carte.PINCE = exploit0;
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      
      Carte.MINOTAURE = Carte.PINCE;
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.MINOTAURE.getType());
      assertNull(Carte.MINOTAURE.getNom());
      
      Integer integer0 = 10;
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      Carte.ANCIEN.stock = integer0;
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      
      Carte.PINCE.modStock();
      assertSame(Carte.PINCE, exploit0);
      assertSame(Carte.MINOTAURE, exploit0);
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.MINOTAURE.getType());
      assertNull(Carte.MINOTAURE.getNom());
      
      Carte.COFFRE.stock = exploit0.stock;
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      
      Tours.joueur2 = joueur0;
      assertEquals("Joueur2 ", joueur0.getJoueur());
      assertEquals("Joueur2 ", Tours.joueur2.getJoueur());
      
      Exploit.effetSabots(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      exploit0.modStock();
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      
      Exploit.effetAiles(Tours.joueur2);
      assertSame(Tours.joueur2, joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      assertEquals("Joueur2 ", Tours.joueur2.getJoueur());
      
      Exploit.effetAiles(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      Joueur joueur1 = new Joueur();
      assertNotEquals(joueur1, joueur0);
      assertNotNull(joueur1);
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      Carte.HYDRE = Carte.MINOTAURE;
      assertNull(Carte.HYDRE.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.HYDRE.getType());
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.MINOTAURE.getType());
      assertNull(Carte.MINOTAURE.getNom());
      
      Carte.HERBES = Carte.MINOTAURE;
      assertNull(Carte.HERBES.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.HERBES.getType());
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.MINOTAURE.getType());
      assertNull(Carte.MINOTAURE.getNom());
      
      Carte.afficheCartesJoueurs(Tours.joueur2);
      assertNotEquals(joueur0, joueur1);
      assertNotEquals(Tours.joueur2, joueur1);
      assertNotSame(joueur0, joueur1);
      assertNotSame(Tours.joueur2, joueur1);
      assertSame(Tours.joueur2, joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      assertEquals("Joueur2 ", Tours.joueur2.getJoueur());
      
      Carte.PINCE.applyEffet(joueur1);
      assertNotEquals(joueur1, joueur0);
      assertSame(Carte.PINCE, exploit0);
      assertNotSame(joueur1, joueur0);
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      Carte.PINCE = Carte.HERBES;
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      
      Joueur joueur2 = new Joueur();
      assertNotEquals(joueur2, joueur0);
      assertNotEquals(joueur2, joueur1);
      assertNotNull(joueur2);
      assertEquals("Joueur2 ", joueur2.getJoueur());
      
      Exploit.effetAncien(joueur2);
      assertNotEquals(joueur2, joueur0);
      assertNotEquals(joueur2, joueur1);
      assertNotSame(joueur2, joueur0);
      assertNotSame(joueur2, joueur1);
      assertEquals("Joueur2 ", joueur2.getJoueur());
      
      TypeEffet typeEffet1 = Carte.PINCE.getType();
      assertEquals(TypeEffet.PERMANENT, typeEffet1);
      assertSame(typeEffet0, typeEffet1);
      assertSame(Carte.PINCE, exploit0);
      assertSame(typeEffet1, typeEffet0);
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      
      exploit0.modStock();
      assertSame(typeEffet0, typeEffet1);
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      
      String string0 = Carte.HERBES.getNom();
      assertNull(string0);
      assertSame(typeEffet0, typeEffet1);
      assertSame(Carte.HERBES, exploit0);
      assertSame(Carte.PINCE, exploit0);
      assertSame(Carte.MINOTAURE, exploit0);
      assertNull(Carte.HERBES.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.HERBES.getType());
      assertEquals(0, prix0.getPrix());
      assertEquals(TypeEffet.PERMANENT, exploit0.getType());
      assertNull(exploit0.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.PINCE.getType());
      assertNull(Carte.PINCE.getNom());
      assertEquals(TypeEffet.PERMANENT, Carte.MINOTAURE.getType());
      assertNull(Carte.MINOTAURE.getNom());
  }


  @Test(timeout = 4000)
  public void test13() {
      Joueur joueur0 = null;
      // Undeclared exception!
      try { 
        Exploit.effetSabots(null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iles.Exploit", e);
      }
  }



  @Test(timeout = 4000)
  public void test20() {
      TypeEffet typeEffet0 = TypeEffet.IMMEDIAT;
      Prix prix0 = new Prix((-802), 0);
      assertNotNull(prix0);
      assertEquals((-802), prix0.getPrix());
      
      Exploit exploit0 = new Exploit(" ", typeEffet0, prix0);
      assertNotNull(exploit0);
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      
      Carte.PASSEUR = exploit0;
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      
      Carte.MINOTAURE = Carte.PASSEUR;
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      assertEquals(" ", Carte.MINOTAURE.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.MINOTAURE.getType());
      
      Carte.COFFRE = Carte.MINOTAURE;
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      assertEquals(" ", Carte.MINOTAURE.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.MINOTAURE.getType());
      assertEquals(" ", Carte.COFFRE.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.COFFRE.getType());
      
      Carte.NULL = Carte.PASSEUR;
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      assertEquals(" ", Carte.NULL.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.NULL.getType());
      
      Joueur joueur0 = new Joueur();
      assertNotNull(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      Tours.joueur2 = joueur0;
      assertEquals("Joueur2 ", joueur0.getJoueur());
      assertEquals("Joueur2 ", Tours.joueur2.getJoueur());
      
      Joueur joueur1 = new Joueur();
      assertNotEquals(joueur1, joueur0);
      assertNotNull(joueur1);
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      exploit0.applyEffet(joueur1);
      assertNotEquals(joueur1, joueur0);
      assertNotSame(joueur1, joueur0);
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      TypeEffet typeEffet1 = Carte.PASSEUR.getType();
      assertEquals(TypeEffet.IMMEDIAT, typeEffet1);
      assertSame(typeEffet0, typeEffet1);
      assertSame(Carte.PASSEUR, exploit0);
      assertSame(typeEffet1, typeEffet0);
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      
      Carte.MINOTAURE.applyEffet(joueur1);
      assertNotEquals(joueur1, joueur0);
      assertSame(typeEffet0, typeEffet1);
      assertSame(Carte.PASSEUR, exploit0);
      assertSame(Carte.MINOTAURE, exploit0);
      assertNotSame(joueur1, joueur0);
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      assertEquals(" ", Carte.MINOTAURE.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.MINOTAURE.getType());
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      Carte.PASSEUR.applyEffet(joueur1);
      assertNotEquals(joueur1, joueur0);
      assertSame(typeEffet0, typeEffet1);
      assertSame(Carte.PASSEUR, exploit0);
      assertNotSame(joueur1, joueur0);
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      Exploit.effetAiles(joueur1);
      assertNotEquals(joueur1, joueur0);
      assertNotSame(joueur1, joueur0);
      assertEquals("Joueur2 ", joueur1.getJoueur());
      
      Exploit.effetAiles(joueur0);
      assertNotEquals(joueur0, joueur1);
      assertNotSame(joueur0, joueur1);
      assertEquals("Joueur2 ", joueur0.getJoueur());
      
      String string0 = Carte.MINOTAURE.getNom();
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertSame(typeEffet0, typeEffet1);
      assertSame(Carte.PASSEUR, exploit0);
      assertSame(Carte.MINOTAURE, exploit0);
      assertEquals((-802), prix0.getPrix());
      assertEquals(" ", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
      assertEquals(" ", Carte.PASSEUR.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.PASSEUR.getType());
      assertEquals(" ", Carte.MINOTAURE.getNom());
      assertEquals(TypeEffet.IMMEDIAT, Carte.MINOTAURE.getType());
      
      Exploit.effetAiles(joueur1);
      assertNotEquals(joueur1, joueur0);
      assertNotSame(joueur1, joueur0);
      assertEquals("Joueur2 ", joueur1.getJoueur());
  }



  @Test(timeout = 4000)
  public void test24() {
      TypeEffet typeEffet0 = TypeEffet.IMMEDIAT;
      Prix prix0 = new Prix(6, 6);
      assertNotNull(prix0);
      assertEquals(0, prix0.getPrix());
      
      Exploit exploit0 = new Exploit("", typeEffet0, prix0);
      assertNotNull(exploit0);
      assertEquals(0, prix0.getPrix());
      assertEquals("", exploit0.getNom());
      assertEquals(TypeEffet.IMMEDIAT, exploit0.getType());
  }



  @Test(timeout = 4000)
  public void test26() {
      Exploit exploit0 = Carte.PASSEUR;
      Joueur joueur0 = new Joueur();
      Exploit.effetAiles(joueur0);
      Exploit.effetSabots(joueur0);
      Joueur joueur1 = new Joueur();
      Carte.MIRROIR = exploit0;
      Exploit exploit1 = Carte.MIRROIR;
      Exploit.effetAncien(joueur0);
      Carte.AILES = exploit1;
      Carte.CASQUE = Carte.AILES;
      joueur1.acheterFace();
      exploit1.applyEffet(joueur0);
      exploit0.getType();
      Random.setNextRandom(exploit0.stock);
      Exploit.effetAncien(joueur0);
      assertEquals("Joueur2 ", joueur0.getJoueur());
  }

  @Test(timeout = 4000)
  public void test27() {
      Joueur joueur0 = new Joueur();
      Exploit.effetAiles(joueur0);
      Exploit exploit0 = Carte.ANCIEN;
      Carte.CASQUE = null;
      Carte.CASQUE = null;
      Carte.ENIGME = null;
      exploit0.applyEffet(joueur0);
      Exploit.effetAncien(joueur0);
      int int0 = 6;
      Carte.HERBES.modStock();
      Carte.SABOTS = Carte.CASQUE;
      Carte.AILES.applyEffet(joueur0);
      Carte.MIRROIR = Carte.SABOTS;
      Carte.PINCE = Carte.SATYRES;
      Carte.CASQUE = exploit0;
      Random.setNextRandom(int0);
      Carte.CASQUE.getType();
  }

  @Test(timeout = 4000)
  public void test28() {
      Exploit exploit0 = Carte.ENIGME;
      Exploit exploit1 = Carte.ENIGME;
      Joueur joueur0 = new Joueur();
      Exploit.effetSabots(joueur0);
  }



  @Test(timeout = 4000)
  public void test30() {
      Exploit exploit0 = Carte.COFFRE;
      Carte.PINCE = exploit0;
      Carte.AILES = exploit0;
      Joueur joueur0 = new Joueur();
      Exploit.effetAiles(joueur0);
      Carte.MARTEAU = Carte.AILES;
      Carte.PASSEUR = exploit0;
      Carte.MEDUSE = Carte.AILES;
      Carte.ENIGME = Carte.PINCE;
      TypeEffet typeEffet0 = exploit0.getType();
      exploit0.getType();
      Carte.NULL = Carte.MEDUSE;
      Carte.PINCE.getType();
      exploit0.getNom();
      Joueur joueur1 = new Joueur();
      Tours.joueur2 = joueur1;
      Exploit.effetAncien(joueur1);
      Carte.PINCE.getNom();
      Carte.PINCE.modStock();
      Exploit.effetAiles(joueur1);
      Tours.joueur1 = joueur1;
      exploit0.applyEffet(joueur1);
      Joueur joueur2 = new Joueur();
      Carte.PASSEUR.applyEffet(joueur2);
      Carte.PINCE.modStock();
      Carte.PASSEUR.applyEffet(Tours.joueur1);
      Joueur joueur3 = new Joueur();
      exploit0.applyEffet(joueur3);
      Joueur joueur4 = new Joueur();
      Exploit.effetSabots(joueur4);
      Exploit.effetAncien(Tours.joueur2);
      exploit0.applyEffet(joueur4);
      Joueur joueur5 = new Joueur();
      Exploit.effetAncien(joueur5);
      exploit0.getType();
      Carte.PINCE.modStock();
      Exploit.effetAiles(joueur4);
      TypeEffet typeEffet1 = Carte.NULL.getType();
      assertSame(typeEffet1, typeEffet0);
  }

  @Test(timeout = 4000)
  public void test31() {
      TypeEffet typeEffet0 = TypeEffet.PERMANENT;
      Prix prix0 = new Prix(182, 10);
      Exploit exploit0 = new Exploit(null, typeEffet0, prix0);
      Joueur joueur0 = new Joueur();
      Carte.PINCE = exploit0;
      Carte.MINOTAURE = Carte.PINCE;
      Exploit.effetSabots(joueur0);
      Carte.ANCIEN.stock = 10;
      Carte.PINCE.modStock();
      Carte.COFFRE.stock = exploit0.stock;
      Tours.joueur2 = joueur0;
      Exploit.effetSabots(joueur0);
      exploit0.modStock();
      Exploit.effetAiles(joueur0);
      Joueur joueur1 = new Joueur();
      Carte.HYDRE = Carte.MINOTAURE;
      Carte.HERBES = Carte.MINOTAURE;
      Carte.afficheCartesJoueurs(Tours.joueur2);
      Carte.PINCE.applyEffet(joueur1);
      Carte.PINCE = Carte.HERBES;
      Joueur joueur2 = new Joueur();
      Exploit.effetAncien(joueur2);
      Carte.PINCE.getType();
      exploit0.modStock();
      Carte.HERBES.getNom();
      int int0 = 8;
      Random.setNextRandom(int0);
  }
}
