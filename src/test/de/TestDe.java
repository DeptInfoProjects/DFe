

package de;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@SuppressWarnings("ALL")
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TestDe extends TestDe2 {

  @Test(timeout = 4000)
  public void test00() {
      De de0 = new De();
      de0.FACE5 = null;
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      de0.initDe2();
      de0.FACE1 = de0.FACE5;
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      de0.setFACE(de0.FACE6);
      de0.faceMin();
      De.compare2Face(de0.FACE6, de0.FACE2);
      de0.initDe1();
      de0.initDe2();
      De.compare2Face(de0.FACE1, de0.FACE1);
  }

  @Test(timeout = 4000)
  public void test01() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      Face face0 = de0.FACE3;
      assertNotNull(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbVICT());
      
      de0.setFACE(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbVICT());
      
      de0.FACE4 = de0.FACE5;
      assertNull(de0.FACE4.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertNull(de0.FACE4.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbOR());
      
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      de0.setFACE(de0.FACE6);
      String string0 = de0.toString();
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      
      Face face2 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(Ressource.SOLAIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbOR());
      
      de0.initDe1();
      de0.initDe2();
      Face face3 = De.compare2Face(face1, de0.FACE5);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotEquals(face1, face0);
      assertNotNull(face3);
      assertNotSame(face3, face0);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face3);
      assertNull(face3.getNbVICT());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      
      String string2 = de0.toString();
      assertNotEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face4 = De.compare2Face(de0.FACE1, face3);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face3);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face3);
      assertNotNull(face4);
      assertNotSame(face3, face0);
      assertNotSame(face3, face1);
      assertNotSame(face3, face4);
      assertNotSame(face3, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNotSame(face4, face3);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face4);
      assertNotSame(face1, face3);
      assertNull(face3.getNbVICT());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      
      de0.setFACE(de0.FACE5);
      Face face5 = de0.FACE6;
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face4);
      assertNotNull(face5);
      assertNotSame(face5, face2);
      assertNotSame(face5, face0);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertNotSame(face5, face4);
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.VICTOIRE, face5.getRes());
      assertEquals(2, (int)face5.getValeur());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      
      Face face6 = De.compare2Face(face2, face5);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face5);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face3);
      assertNotNull(face6);
      assertNotSame(face5, face2);
      assertNotSame(face5, face0);
      assertNotSame(face5, face6);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertNotSame(face5, face4);
      assertSame(face6, face2);
      assertNotSame(face6, face3);
      assertSame(face6, face1);
      assertNotSame(face6, face4);
      assertNotSame(face6, face0);
      assertNotSame(face6, face5);
      assertNotSame(face2, face5);
      assertNotSame(face2, face4);
      assertNotSame(face2, face0);
      assertSame(face2, face6);
      assertSame(face2, face1);
      assertNotSame(face2, face3);
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.VICTOIRE, face5.getRes());
      assertEquals(2, (int)face5.getValeur());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbOR());
      assertEquals(Ressource.SOLAIRE, face6.getRes());
      assertNull(face6.getNbVICT());
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.SOLAIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbOR());
      
      Face face7 = De.compare2Face(de0.FACE3, de0.FACE2);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face4);
      assertNotNull(face7);
      assertNotSame(face7, face2);
      assertNotSame(face7, face5);
      assertNotSame(face7, face3);
      assertNotSame(face7, face6);
      assertNotSame(face7, face1);
      assertNotSame(face7, face0);
      assertNotSame(face7, face4);
      assertNull(face7.getNbLUN());
      assertEquals(Ressource.OR, face7.getRes());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbSOL());
      assertNull(face7.getNbOR());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test02() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      
      de0.FACE6 = face0;
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(de0.FACE6.getNbOR());
      assertNull(de0.FACE6.getNbVICT());
      assertNull(de0.FACE6.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE6.getType());
      assertEquals(1, (int)de0.FACE6.getValeur());
      assertNull(de0.FACE6.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE6.getRes());
      
      de0.FACE2 = face0;
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(de0.FACE2.getNbSOL());
      assertNull(de0.FACE2.getNbOR());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbLUN());
      assertNull(de0.FACE2.getNbVICT());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      
      de0.setFACE(de0.FACE6);
      Face face1 = de0.faceMin();
      assertNotNull(face1);
      assertSame(face1, face0);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      
      String string2 = de0.toString();
      assertNotEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face2 = de0.faceMin();
      assertNotNull(face2);
      assertSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      
      Face face3 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotNull(face3);
      assertSame(face3, face2);
      assertSame(face3, face0);
      assertSame(face3, face1);
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      
      de0.initDe1();
      de0.initDe2();
      String string3 = de0.toString();
      assertNotEquals(string3, string1);
      assertEquals(string3, string0);
      assertNotEquals(string3, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face4 = De.compare2Face(de0.FACE1, de0.FACE1);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face3);
      assertNotNull(face4);
      assertNotSame(face4, face1);
      assertNotSame(face4, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face3);
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
  }

  @Test(timeout = 4000)
  public void test03() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      de0.FACE4 = de0.FACE5;
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertNull(de0.FACE4.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertNull(de0.FACE4.getNbOR());
      assertNull(de0.FACE4.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      assertEquals(1, (int)de0.FACE4.getValeur());
      
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      String string0 = de0.toString();
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(de0.FACE6);
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      
      Face face1 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotNull(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      
      de0.initDe1();
      de0.initDe2();
      Face face2 = De.compare2Face(face0, de0.FACE5);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertSame(face0, face1);
      assertNotSame(face0, face2);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      
      String string3 = de0.toString();
      assertNotEquals(string3, string0);
      assertNotEquals(string3, string2);
      assertNotEquals(string3, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face3 = De.compare2Face(de0.FACE1, face2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotEquals(face0, face2);
      assertNotNull(face3);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNotSame(face2, face3);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertSame(face0, face1);
      assertNotSame(face0, face3);
      assertNotSame(face0, face2);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbVICT());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      
      de0.setFACE(de0.FACE5);
      Face face4 = de0.FACE6;
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertEquals(2, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      
      Face face5 = De.compare2Face(face1, face4);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face2);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face4);
      assertNotNull(face5);
      assertNotSame(face4, face5);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertSame(face5, face0);
      assertSame(face5, face1);
      assertNotSame(face5, face4);
      assertNotSame(face5, face3);
      assertNotSame(face5, face2);
      assertNotSame(face1, face2);
      assertSame(face1, face5);
      assertSame(face1, face0);
      assertNotSame(face1, face3);
      assertNotSame(face1, face4);
      assertEquals(2, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.SOLAIRE, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
  }

  @Test(timeout = 4000)
  public void test04() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.FACE5 = null;
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      de0.FACE4 = de0.FACE5;
      assertNull(de0.FACE4.getNbLUN());
      assertNull(de0.FACE4.getNbSOL());
      assertNull(de0.FACE4.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbVICT());
      
      de0.setFACE(de0.FACE6);
      de0.initDe2();
      Face face0 = de0.FACE4;
      assertNotNull(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      
      de0.FACE1 = face0;
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(de0.FACE1.getNbVICT());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbOR());
      assertNull(de0.FACE1.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(de0.FACE6);
      String string2 = de0.toString();
      assertNotEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertNotEquals(string3, string0);
      assertEquals(string3, string2);
      assertNotEquals(string3, string1);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      
      Face face2 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      
      de0.initDe1();
      de0.initDe2();
      Face face3 = De.compare2Face(face1, de0.FACE5);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face3);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbVICT());
      
      String string4 = de0.toString();
      assertNotEquals(string4, string1);
      assertEquals(string4, string0);
      assertNotEquals(string4, string3);
      assertNotEquals(string4, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string4);
      assertNotNull(string4);
      
      Face face4 = De.compare2Face(de0.FACE1, face3);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face3);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotNull(face4);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertNotSame(face1, face3);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face4);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbVICT());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.setFACE(de0.FACE5);
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face3);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertNotSame(face1, face3);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      
      String string5 = de0.toString();
      assertNotEquals(string5, string1);
      assertNotEquals(string5, string2);
      assertNotEquals(string5, string4);
      assertNotEquals(string5, string3);
      assertNotEquals(string5, string0);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string5);
      assertNotNull(string5);
      
      de0.setFACE(face4);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face3);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face4);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertNotSame(face1, face3);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face4);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbVICT());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.OR, face4.getRes());
  }

  @Test(timeout = 4000)
  public void test05() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE3;
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      
      de0.FACE2 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertNull(de0.FACE2.getNbLUN());
      assertNull(de0.FACE2.getNbSOL());
      assertNull(de0.FACE2.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbVICT());
      
      de0.setFACE(de0.FACE3);
      de0.setFACE(de0.FACE6);
      de0.setFACE(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      
      de0.initDe1();
      de0.initDe2();
      Face face1 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      
      Face face2 = de0.faceMin();
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face2);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      Face face3 = De.compare2Face(de0.FACE1, de0.FACE2);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertNotSame(face3, face1);
      assertNull(face3.getNbLUN());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      
      de0.setFACE(face3);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertNotSame(face3, face1);
      assertNull(face3.getNbLUN());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      
      de0.initDe2();
      de0.setFACE(face2);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      Face face4 = De.compare2Face(face3, face3);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotNull(face4);
      assertNotSame(face4, face1);
      assertSame(face4, face2);
      assertNotSame(face4, face0);
      assertSame(face4, face3);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face3.getNbLUN());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      
      de0.initDe2();
      Face face5 = De.compare2Face(face2, face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face0);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face5);
      assertNotSame(face0, face2);
      assertNotSame(face0, face1);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertNotSame(face0, face5);
      assertSame(face5, face4);
      assertNotSame(face5, face1);
      assertSame(face5, face2);
      assertNotSame(face5, face0);
      assertSame(face5, face3);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertSame(face2, face4);
      assertSame(face2, face5);
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      Face face6 = De.compare2Face(face5, de0.FACE4);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face5);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face0);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face6);
      assertNotSame(face0, face2);
      assertNotSame(face0, face1);
      assertNotSame(face0, face6);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertNotSame(face0, face5);
      assertSame(face5, face6);
      assertNotSame(face5, face1);
      assertSame(face5, face4);
      assertSame(face5, face2);
      assertNotSame(face5, face0);
      assertSame(face5, face3);
      assertSame(face6, face4);
      assertNotSame(face6, face1);
      assertSame(face6, face3);
      assertSame(face6, face2);
      assertSame(face6, face5);
      assertNotSame(face6, face0);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertSame(face2, face4);
      assertSame(face2, face5);
      assertSame(face2, face6);
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbOR());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      Face face7 = de0.faceMin();
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face0);
      assertNotNull(face7);
      assertNotSame(face7, face4);
      assertNotSame(face7, face6);
      assertNotSame(face7, face5);
      assertNotSame(face7, face3);
      assertNotSame(face7, face2);
      assertNotSame(face7, face1);
      assertNotSame(face7, face0);
      assertNull(face7.getNbOR());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbVICT());
      assertEquals(1, (int)face7.getValeur());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      
      Face face8 = de0.getFace();
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face0);
      assertNotNull(face8);
      assertNotSame(face8, face4);
      assertNotSame(face8, face6);
      assertNotSame(face8, face5);
      assertSame(face8, face7);
      assertNotSame(face8, face2);
      assertNotSame(face8, face3);
      assertNotSame(face8, face1);
      assertNotSame(face8, face0);
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertEquals(Type.NORMAL, face8.getType());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotSame(face2, face8);
      assertNotSame(face2, face7);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertSame(face2, face4);
      assertSame(face2, face5);
      assertSame(face2, face6);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face8);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotSame(face1, face5);
      assertNotSame(face1, face3);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertNotSame(face1, face8);
      assertNotSame(face1, face6);
      assertNotSame(face1, face7);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      
      Face face9 = De.compare2Face(de0.FACE5, face2);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face1);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face9);
      assertNotSame(face9, face7);
      assertNotSame(face9, face0);
      assertNotSame(face9, face8);
      assertSame(face9, face3);
      assertNotSame(face9, face1);
      assertSame(face9, face4);
      assertSame(face9, face2);
      assertSame(face9, face5);
      assertSame(face9, face6);
      assertNotSame(face2, face8);
      assertNotSame(face2, face7);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertSame(face2, face4);
      assertSame(face2, face5);
      assertSame(face2, face9);
      assertSame(face2, face6);
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      Face face10 = de0.getFace();
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face3);
      assertNotNull(face10);
      assertNotSame(face10, face5);
      assertNotSame(face10, face4);
      assertNotSame(face10, face9);
      assertNotSame(face10, face6);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face8);
      assertNotSame(face10, face3);
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbOR());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(Ressource.LUNAIRE, face10.getRes());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      
      de0.setFACE(face10);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face3);
      assertNotSame(face10, face5);
      assertNotSame(face10, face4);
      assertNotSame(face10, face9);
      assertNotSame(face10, face6);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face8);
      assertNotSame(face10, face3);
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbOR());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(Ressource.LUNAIRE, face10.getRes());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      
      de0.initDe2();
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face11 = De.compare2Face(face10, face1);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face8);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face9);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face3);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotNull(face11);
      assertNotSame(face1, face5);
      assertSame(face1, face10);
      assertNotSame(face1, face3);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertNotSame(face1, face8);
      assertNotSame(face1, face6);
      assertSame(face1, face11);
      assertNotSame(face1, face7);
      assertNotSame(face1, face9);
      assertSame(face10, face11);
      assertNotSame(face10, face5);
      assertNotSame(face10, face4);
      assertNotSame(face10, face9);
      assertNotSame(face10, face6);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face8);
      assertNotSame(face10, face3);
      assertNotSame(face11, face9);
      assertSame(face11, face1);
      assertNotSame(face11, face3);
      assertSame(face11, face10);
      assertNotSame(face11, face4);
      assertNotSame(face11, face5);
      assertNotSame(face11, face0);
      assertNotSame(face11, face2);
      assertNotSame(face11, face7);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbOR());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(Ressource.LUNAIRE, face10.getRes());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      
      Face face12 = de0.faceMin();
      assertNotEquals(face12, face10);
      assertNotEquals(face12, face2);
      assertNotEquals(face12, face11);
      assertNotEquals(face12, face0);
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face5);
      assertNotEquals(face12, face3);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face6);
      assertNotEquals(face12, face9);
      assertNotEquals(face12, face7);
      assertNotNull(face12);
      assertNotSame(face12, face10);
      assertNotSame(face12, face2);
      assertNotSame(face12, face11);
      assertNotSame(face12, face0);
      assertNotSame(face12, face4);
      assertNotSame(face12, face8);
      assertNotSame(face12, face5);
      assertNotSame(face12, face3);
      assertNotSame(face12, face1);
      assertNotSame(face12, face6);
      assertNotSame(face12, face9);
      assertNotSame(face12, face7);
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbLUN());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbVICT());
      assertEquals(Ressource.OR, face12.getRes());
      assertEquals(Type.NORMAL, face12.getType());
      
      de0.setFACE(face10);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face12);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face3);
      assertSame(face10, face11);
      assertNotSame(face10, face5);
      assertNotSame(face10, face12);
      assertNotSame(face10, face4);
      assertNotSame(face10, face9);
      assertNotSame(face10, face6);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face8);
      assertNotSame(face10, face3);
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbOR());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(Ressource.LUNAIRE, face10.getRes());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      
      de0.initDe1();
      Face face13 = de0.faceMin();
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face0);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face2);
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face3);
      assertNotEquals(face13, face10);
      assertNotEquals(face13, face7);
      assertNotEquals(face13, face11);
      assertNotEquals(face13, face12);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face9);
      assertNotEquals(face13, face5);
      assertNotNull(face13);
      assertNotSame(face13, face6);
      assertNotSame(face13, face0);
      assertNotSame(face13, face1);
      assertNotSame(face13, face2);
      assertNotSame(face13, face4);
      assertNotSame(face13, face3);
      assertNotSame(face13, face10);
      assertNotSame(face13, face7);
      assertNotSame(face13, face11);
      assertNotSame(face13, face12);
      assertNotSame(face13, face8);
      assertNotSame(face13, face9);
      assertNotSame(face13, face5);
      assertNull(face13.getNbLUN());
      assertNull(face13.getNbVICT());
      assertEquals(Ressource.OR, face13.getRes());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Type.NORMAL, face13.getType());
      assertNull(face13.getNbSOL());
      assertNull(face13.getNbOR());
      
      Face face14 = de0.getFace();
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face11);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face7);
      assertNotEquals(face14, face5);
      assertNotEquals(face14, face9);
      assertNotEquals(face14, face12);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face10);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face4);
      assertNotNull(face14);
      assertNotSame(face14, face1);
      assertNotSame(face14, face11);
      assertNotSame(face14, face0);
      assertNotSame(face14, face7);
      assertNotSame(face14, face5);
      assertNotSame(face14, face9);
      assertNotSame(face14, face12);
      assertNotSame(face14, face3);
      assertNotSame(face14, face8);
      assertNotSame(face14, face10);
      assertNotSame(face14, face2);
      assertNotSame(face14, face6);
      assertNotSame(face14, face4);
      assertSame(face14, face13);
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbVICT());
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      assertNull(face14.getNbOR());
      
      de0.setFACE(face9);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face11);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face13);
      assertNotEquals(face9, face10);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face14);
      assertNotEquals(face9, face12);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face12);
      assertNotEquals(face2, face11);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face14);
      assertNotEquals(face2, face13);
      assertNotSame(face9, face0);
      assertNotSame(face9, face13);
      assertSame(face9, face3);
      assertNotSame(face9, face14);
      assertNotSame(face9, face12);
      assertSame(face9, face5);
      assertNotSame(face9, face7);
      assertNotSame(face9, face11);
      assertNotSame(face9, face8);
      assertNotSame(face9, face10);
      assertNotSame(face9, face1);
      assertSame(face9, face4);
      assertSame(face9, face2);
      assertSame(face9, face6);
      assertNotSame(face2, face12);
      assertNotSame(face2, face8);
      assertNotSame(face2, face11);
      assertNotSame(face2, face7);
      assertNotSame(face2, face10);
      assertSame(face2, face3);
      assertSame(face2, face4);
      assertSame(face2, face6);
      assertNotSame(face2, face1);
      assertNotSame(face2, face14);
      assertNotSame(face2, face0);
      assertNotSame(face2, face13);
      assertSame(face2, face5);
      assertSame(face2, face9);
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test06() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE6;
      assertNotNull(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      
      de0.setFACE(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      
      Face face1 = de0.FACE5;
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      Face face2 = De.compare2Face(face1, de0.FACE6);
      assertNotEquals(face1, face0);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      
      Face face3 = de0.getFace();
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertSame(face3, face0);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(2, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face3.getRes());
      assertNull(face3.getNbOR());
      
      Face face4 = De.compare2Face(de0.FACE4, face1);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face0);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face1, face4);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      
      Face face5 = de0.faceMin();
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotNull(face5);
      assertNotSame(face5, face3);
      assertNotSame(face5, face0);
      assertNotSame(face5, face1);
      assertNotSame(face5, face2);
      assertNotSame(face5, face4);
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      
      de0.initDe1();
      de0.FACE2 = face5;
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbVICT());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbOR());
      
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face3);
      assertNotEquals(face3, face4);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face5);
      assertNotEquals(face3, face1);
      assertSame(face3, face0);
      assertNotSame(face3, face4);
      assertNotSame(face3, face2);
      assertNotSame(face3, face5);
      assertNotSame(face3, face1);
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(2, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face3.getRes());
      assertNull(face3.getNbOR());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face3);
      assertNotSame(face1, face4);
      assertNotSame(face1, face5);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face3);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      Face face6 = de0.FACE2;
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face0);
      assertNotNull(face6);
      assertNotSame(face6, face5);
      assertNotSame(face6, face4);
      assertSame(face6, face1);
      assertNotSame(face6, face3);
      assertNotSame(face6, face0);
      assertSame(face6, face2);
      assertEquals(Ressource.LUNAIRE, face6.getRes());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbVICT());
      assertEquals(Type.NORMAL, face6.getType());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face3);
      assertNotSame(face1, face4);
      assertSame(face1, face6);
      assertNotSame(face1, face5);
      assertSame(face1, face2);
      assertNotSame(face1, face3);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.getFace();
      assertNotNull(face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      
      de0.FACE4 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      assertNull(de0.FACE4.getNbOR());
      assertNull(de0.FACE4.getNbVICT());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      
      Random.setNextRandom((-445));
      Random.setNextRandom(2);
      Face face1 = de0.FACE3;
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      
      Face face3 = De.compare2Face(face1, de0.FACE3);
      assertNotEquals(face1, face0);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertSame(face1, face2);
      assertSame(face1, face3);
      assertNotSame(face1, face0);
      assertSame(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      
      Face face4 = de0.getFace();
      assertNotEquals(face4, face0);
      assertNotNull(face4);
      assertSame(face4, face3);
      assertNotSame(face4, face0);
      assertSame(face4, face2);
      assertSame(face4, face1);
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      
      Face face5 = De.compare2Face(de0.FACE4, de0.FACE5);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotNull(face5);
      assertSame(face5, face0);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      
      Face face6 = de0.faceMin();
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face1);
      assertNotNull(face6);
      assertNotSame(face6, face2);
      assertSame(face6, face0);
      assertSame(face6, face5);
      assertNotSame(face6, face4);
      assertNotSame(face6, face3);
      assertNotSame(face6, face1);
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbOR());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbVICT());
      assertEquals(Type.NORMAL, face6.getType());
      
      Random.setNextRandom(2);
      Face face7 = De.compare2Face(de0.FACE5, de0.FACE2);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face6);
      assertNotNull(face7);
      assertNotSame(face7, face1);
      assertNotSame(face7, face4);
      assertNotSame(face7, face2);
      assertNotSame(face7, face3);
      assertNotSame(face7, face0);
      assertNotSame(face7, face5);
      assertNotSame(face7, face6);
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      assertEquals(1, (int)face7.getValeur());
      
      Face face8 = de0.getFace();
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face5);
      assertNotNull(face8);
      assertNotSame(face8, face7);
      assertSame(face8, face1);
      assertSame(face8, face2);
      assertNotSame(face8, face6);
      assertSame(face8, face3);
      assertNotSame(face8, face0);
      assertNotSame(face8, face5);
      assertSame(face8, face4);
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertNull(face8.getNbLUN());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbSOL());
      
      Random.setNextRandom(4);
      Face face9 = de0.getFace();
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face5);
      assertNotNull(face9);
      assertNotSame(face9, face4);
      assertNotSame(face9, face0);
      assertNotSame(face9, face1);
      assertSame(face9, face7);
      assertNotSame(face9, face3);
      assertNotSame(face9, face2);
      assertNotSame(face9, face6);
      assertNotSame(face9, face8);
      assertNotSame(face9, face5);
      assertNull(face9.getNbVICT());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbSOL());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbLUN());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbOR());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face4);
      assertNotEquals(face4, face5);
      assertNotEquals(face4, face6);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face7);
      assertNotEquals(face4, face9);
      assertNotSame(face4, face5);
      assertSame(face4, face3);
      assertNotSame(face4, face6);
      assertNotSame(face4, face0);
      assertSame(face4, face2);
      assertNotSame(face4, face7);
      assertNotSame(face4, face9);
      assertSame(face4, face8);
      assertSame(face4, face1);
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      
      Face face10 = de0.getFace();
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face6);
      assertNotNull(face10);
      assertNotSame(face10, face0);
      assertSame(face10, face7);
      assertSame(face10, face9);
      assertNotSame(face10, face5);
      assertNotSame(face10, face2);
      assertNotSame(face10, face8);
      assertNotSame(face10, face1);
      assertNotSame(face10, face3);
      assertNotSame(face10, face4);
      assertNotSame(face10, face6);
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face6);
      assertNotNull(face11);
      assertNotSame(face11, face0);
      assertNotSame(face11, face5);
      assertNotSame(face11, face8);
      assertSame(face11, face7);
      assertSame(face11, face10);
      assertNotSame(face11, face2);
      assertNotSame(face11, face1);
      assertNotSame(face11, face3);
      assertNotSame(face11, face4);
      assertSame(face11, face9);
      assertNotSame(face11, face6);
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      
      de0.setFACE(face3);
      assertNotEquals(face1, face11);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face9);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face10);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face5);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face10);
      assertNotEquals(face3, face11);
      assertNotEquals(face3, face6);
      assertSame(face1, face2);
      assertNotSame(face1, face11);
      assertNotSame(face1, face7);
      assertNotSame(face1, face9);
      assertSame(face1, face8);
      assertSame(face1, face3);
      assertNotSame(face1, face5);
      assertSame(face1, face4);
      assertNotSame(face1, face6);
      assertNotSame(face1, face0);
      assertNotSame(face1, face10);
      assertSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face7);
      assertNotSame(face3, face5);
      assertNotSame(face3, face9);
      assertSame(face3, face4);
      assertNotSame(face3, face10);
      assertSame(face3, face8);
      assertSame(face3, face2);
      assertNotSame(face3, face11);
      assertNotSame(face3, face6);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      
      Random.setNextRandom(4);
      Face face12 = de0.getFace();
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face6);
      assertNotEquals(face12, face3);
      assertNotEquals(face12, face0);
      assertNotEquals(face12, face2);
      assertNotEquals(face12, face5);
      assertNotEquals(face12, face8);
      assertNotNull(face12);
      assertNotSame(face12, face1);
      assertNotSame(face12, face4);
      assertNotSame(face12, face6);
      assertNotSame(face12, face3);
      assertSame(face12, face9);
      assertSame(face12, face7);
      assertSame(face12, face11);
      assertNotSame(face12, face0);
      assertNotSame(face12, face2);
      assertNotSame(face12, face5);
      assertNotSame(face12, face8);
      assertSame(face12, face10);
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbVICT());
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbSOL());
      assertEquals(Ressource.OR, face12.getRes());
      
      Face face13 = de0.getFace();
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face5);
      assertNotEquals(face13, face2);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face0);
      assertNotEquals(face13, face3);
      assertNotNull(face13);
      assertNotSame(face13, face4);
      assertSame(face13, face9);
      assertSame(face13, face10);
      assertNotSame(face13, face5);
      assertSame(face13, face11);
      assertNotSame(face13, face2);
      assertNotSame(face13, face3);
      assertSame(face13, face12);
      assertNotSame(face13, face6);
      assertNotSame(face13, face8);
      assertNotSame(face13, face1);
      assertSame(face13, face7);
      assertNotSame(face13, face0);
      assertNull(face13.getNbVICT());
      assertNull(face13.getNbLUN());
      assertEquals(1, (int)face13.getValeur());
      assertNull(face13.getNbOR());
      assertNull(face13.getNbSOL());
      assertEquals(Ressource.OR, face13.getRes());
      assertEquals(Type.NORMAL, face13.getType());
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face2);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face13);
      assertNotEquals(face2, face11);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face12);
      assertSame(face2, face8);
      assertNotSame(face2, face13);
      assertNotSame(face2, face11);
      assertSame(face2, face1);
      assertNotSame(face2, face6);
      assertSame(face2, face3);
      assertNotSame(face2, face5);
      assertNotSame(face2, face9);
      assertNotSame(face2, face7);
      assertNotSame(face2, face10);
      assertNotSame(face2, face0);
      assertSame(face2, face4);
      assertNotSame(face2, face12);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      
      Random.setNextRandom(4);
      Face face14 = de0.getFace();
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face5);
      assertNotNull(face14);
      assertNotSame(face14, face1);
      assertNotSame(face14, face6);
      assertSame(face14, face9);
      assertSame(face14, face7);
      assertSame(face14, face10);
      assertNotSame(face14, face0);
      assertNotSame(face14, face8);
      assertSame(face14, face13);
      assertSame(face14, face12);
      assertNotSame(face14, face3);
      assertNotSame(face14, face4);
      assertNotSame(face14, face2);
      assertNotSame(face14, face5);
      assertSame(face14, face11);
      assertNull(face14.getNbOR());
      assertNull(face14.getNbVICT());
      assertNull(face14.getNbLUN());
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertEquals(string3, string2);
      assertEquals(string3, string0);
      assertEquals(string3, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face15 = de0.getFace();
      assertNotEquals(face15, face1);
      assertNotEquals(face15, face2);
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face6);
      assertNotEquals(face15, face5);
      assertNotEquals(face15, face3);
      assertNotEquals(face15, face4);
      assertNotEquals(face15, face0);
      assertNotNull(face15);
      assertNotSame(face15, face1);
      assertNotSame(face15, face2);
      assertNotSame(face15, face8);
      assertNotSame(face15, face6);
      assertSame(face15, face10);
      assertSame(face15, face7);
      assertSame(face15, face12);
      assertNotSame(face15, face4);
      assertSame(face15, face13);
      assertNotSame(face15, face0);
      assertSame(face15, face9);
      assertSame(face15, face11);
      assertSame(face15, face14);
      assertNotSame(face15, face5);
      assertNotSame(face15, face3);
      assertNull(face15.getNbLUN());
      assertNull(face15.getNbSOL());
      assertNull(face15.getNbOR());
      assertEquals(1, (int)face15.getValeur());
      assertEquals(Type.NORMAL, face15.getType());
      assertEquals(Ressource.OR, face15.getRes());
      assertNull(face15.getNbVICT());
      
      Random.setNextRandom(4);
      Face face16 = De.compare2Face(face14, face11);
      assertNotEquals(face16, face4);
      assertNotEquals(face16, face0);
      assertNotEquals(face16, face3);
      assertNotEquals(face16, face6);
      assertNotEquals(face16, face5);
      assertNotEquals(face16, face8);
      assertNotEquals(face16, face1);
      assertNotEquals(face16, face2);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face6);
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face5);
      assertNotNull(face16);
      assertSame(face16, face10);
      assertSame(face16, face7);
      assertNotSame(face16, face4);
      assertNotSame(face16, face3);
      assertNotSame(face16, face0);
      assertSame(face16, face9);
      assertNotSame(face16, face6);
      assertSame(face16, face13);
      assertNotSame(face16, face8);
      assertNotSame(face16, face1);
      assertSame(face16, face12);
      assertSame(face16, face15);
      assertNotSame(face16, face5);
      assertSame(face16, face14);
      assertSame(face16, face11);
      assertNotSame(face16, face2);
      assertNotSame(face11, face5);
      assertSame(face11, face12);
      assertSame(face11, face13);
      assertSame(face11, face15);
      assertNotSame(face11, face3);
      assertSame(face11, face16);
      assertSame(face11, face9);
      assertSame(face11, face14);
      assertNotSame(face11, face0);
      assertNotSame(face11, face8);
      assertSame(face11, face7);
      assertSame(face11, face10);
      assertNotSame(face11, face2);
      assertNotSame(face11, face1);
      assertNotSame(face11, face4);
      assertNotSame(face11, face6);
      assertNotSame(face14, face1);
      assertSame(face14, face15);
      assertNotSame(face14, face6);
      assertSame(face14, face9);
      assertSame(face14, face7);
      assertSame(face14, face10);
      assertNotSame(face14, face0);
      assertNotSame(face14, face8);
      assertSame(face14, face13);
      assertSame(face14, face12);
      assertNotSame(face14, face3);
      assertSame(face14, face16);
      assertNotSame(face14, face4);
      assertNotSame(face14, face2);
      assertNotSame(face14, face5);
      assertSame(face14, face11);
      assertNull(face16.getNbVICT());
      assertEquals(1, (int)face16.getValeur());
      assertNull(face16.getNbLUN());
      assertNull(face16.getNbSOL());
      assertEquals(Ressource.OR, face16.getRes());
      assertNull(face16.getNbOR());
      assertEquals(Type.NORMAL, face16.getType());
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbVICT());
      assertNull(face14.getNbLUN());
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      
      Face face17 = de0.faceMin();
      assertNotEquals(face17, face0);
      assertNotEquals(face17, face15);
      assertNotEquals(face17, face5);
      assertNotEquals(face17, face16);
      assertNotEquals(face17, face9);
      assertNotEquals(face17, face11);
      assertNotEquals(face17, face12);
      assertNotEquals(face17, face7);
      assertNotEquals(face17, face10);
      assertNotEquals(face17, face14);
      assertNotEquals(face17, face13);
      assertNotEquals(face17, face6);
      assertNotNull(face17);
      assertSame(face17, face3);
      assertNotSame(face17, face0);
      assertNotSame(face17, face15);
      assertNotSame(face17, face9);
      assertSame(face17, face4);
      assertSame(face17, face8);
      assertNotSame(face17, face11);
      assertSame(face17, face1);
      assertNotSame(face17, face14);
      assertNotSame(face17, face5);
      assertNotSame(face17, face16);
      assertSame(face17, face2);
      assertNotSame(face17, face12);
      assertNotSame(face17, face7);
      assertNotSame(face17, face10);
      assertNotSame(face17, face13);
      assertNotSame(face17, face6);
      assertEquals(Ressource.OR, face17.getRes());
      assertEquals(Type.NORMAL, face17.getType());
      assertEquals(1, (int)face17.getValeur());
      assertNull(face17.getNbSOL());
      assertNull(face17.getNbLUN());
      assertNull(face17.getNbOR());
      assertNull(face17.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test08() {
      Random.setNextRandom(59);
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.getFace();
      assertNotNull(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      
      de0.FACE1 = face0;
      assertNull(face0.getNbOR());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbOR());
      assertNull(de0.FACE1.getNbVICT());
      assertNull(de0.FACE1.getNbLUN());
      assertEquals(Ressource.SOLAIRE, de0.FACE1.getRes());
      
      de0.initDe1();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      
      de0.FACE6 = face0;
      assertNull(face0.getNbOR());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      assertNull(de0.FACE6.getNbVICT());
      assertNull(de0.FACE6.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE6.getType());
      assertEquals(Ressource.SOLAIRE, de0.FACE6.getRes());
      assertEquals(1, (int)de0.FACE6.getValeur());
      assertNull(de0.FACE6.getNbSOL());
      assertNull(de0.FACE6.getNbOR());
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face0);
      assertNotEquals(face0, face1);
      assertNotSame(face0, face1);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertSame(face2, face0);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.SOLAIRE, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(1, (int)face2.getValeur());
      
      Face face3 = de0.getFace();
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.SOLAIRE, face3.getRes());
      assertNull(face3.getNbVICT());
      
      Random.setNextRandom(59);
      Face face4 = De.compare2Face(de0.FACE6, de0.FACE3);
      assertNotEquals(face0, face1);
      assertNotEquals(de0.FACE6, face1);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertSame(face0, face3);
      assertNotSame(face0, face1);
      assertSame(face0, face2);
      assertNotSame(face0, face4);
      assertNotSame(de0.FACE6, face4);
      assertSame(de0.FACE6, face2);
      assertSame(de0.FACE6, face0);
      assertSame(de0.FACE6, face3);
      assertNotSame(de0.FACE6, face1);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      assertNull(de0.FACE6.getNbVICT());
      assertNull(de0.FACE6.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE6.getType());
      assertEquals(Ressource.SOLAIRE, de0.FACE6.getRes());
      assertEquals(1, (int)de0.FACE6.getValeur());
      assertNull(de0.FACE6.getNbSOL());
      assertNull(de0.FACE6.getNbOR());
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      
      Random.setNextRandom(59);
      Random.setNextRandom(59);
  }

  @Test(timeout = 4000)
  public void test09() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.FACE5 = null;
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      assertNull(de0.FACE5.getNbVICT());
      assertEquals(Ressource.OR, de0.FACE5.getRes());
      assertEquals(Type.NORMAL, de0.FACE5.getType());
      assertNull(de0.FACE5.getNbSOL());
      assertNull(de0.FACE5.getNbOR());
      assertEquals(1, (int)de0.FACE5.getValeur());
      assertNull(de0.FACE5.getNbLUN());
      
      de0.setFACE(de0.FACE6);
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(de0.FACE5);
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(de0.FACE6);
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertEquals(1, (int)face0.getValeur());
      
      String string2 = de0.toString();
      assertNotEquals(string2, string0);
      assertNotEquals(string2, string1);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertEquals(string3, string2);
      assertNotEquals(string3, string0);
      assertNotEquals(string3, string1);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face1 = de0.faceMin();
      assertNotNull(face1);
      assertSame(face1, face0);
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      
      Face face2 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertEquals(2, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      
      de0.initDe1();
      de0.initDe2();
      Face face3 = de0.FACE4;
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbOR());
      
      String string4 = de0.toString();
      assertEquals(string4, string0);
      assertNotEquals(string4, string3);
      assertNotEquals(string4, string1);
      assertNotEquals(string4, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string4);
      assertNotNull(string4);
      
      Face face4 = De.compare2Face(de0.FACE1, face3);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face4);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      
      de0.setFACE(face0);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face2);
      assertNotSame(face0, face4);
      assertNotSame(face0, face3);
      assertNotSame(face0, face2);
      assertSame(face0, face1);
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertEquals(1, (int)face0.getValeur());
  }

  @Test(timeout = 4000)
  public void test10() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE3;
      assertNotNull(face0);
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(1, (int)face0.getValeur());
      
      de0.FACE2 = face0;
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(1, (int)face0.getValeur());
      assertNull(de0.FACE2.getNbVICT());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertNull(de0.FACE2.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbLUN());
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      
      de0.initDe1();
      de0.initDe2();
      Face face2 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face3);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      
      Face face4 = De.compare2Face(de0.FACE1, de0.FACE2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face4, face1);
      assertSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.setFACE(face4);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotSame(face4, face1);
      assertSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.initDe2();
      de0.setFACE(face3);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertSame(face3, face4);
      assertNotSame(face3, face0);
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      
      Face face5 = De.compare2Face(face4, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotNull(face5);
      assertNotSame(face5, face1);
      assertSame(face5, face3);
      assertNotSame(face5, face0);
      assertSame(face5, face4);
      assertNotSame(face5, face2);
      assertSame(face4, face5);
      assertNotSame(face4, face1);
      assertSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face5.getNbSOL());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.initDe2();
      Face face6 = De.compare2Face(face3, face0);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face3);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotNull(face6);
      assertNotSame(face0, face1);
      assertNotSame(face0, face2);
      assertNotSame(face0, face4);
      assertNotSame(face0, face6);
      assertNotSame(face0, face5);
      assertNotSame(face0, face3);
      assertSame(face6, face3);
      assertSame(face6, face4);
      assertNotSame(face6, face2);
      assertSame(face6, face5);
      assertNotSame(face6, face1);
      assertNotSame(face6, face0);
      assertSame(face3, face6);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertSame(face3, face5);
      assertSame(face3, face4);
      assertNotSame(face3, face0);
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbLUN());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(1, (int)face6.getValeur());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face2);
      assertNotNull(face7);
      assertNotSame(face7, face3);
      assertNotSame(face7, face1);
      assertNotSame(face7, face5);
      assertNotSame(face7, face0);
      assertNotSame(face7, face4);
      assertNotSame(face7, face6);
      assertNotSame(face7, face2);
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      
      Face face8 = de0.faceMin();
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face0);
      assertNotNull(face8);
      assertNotSame(face8, face6);
      assertNotSame(face8, face4);
      assertNotSame(face8, face5);
      assertNotSame(face8, face1);
      assertNotSame(face8, face2);
      assertSame(face8, face7);
      assertNotSame(face8, face3);
      assertNotSame(face8, face0);
      assertNull(face8.getNbVICT());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbSOL());
      assertEquals(1, (int)face8.getValeur());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbOR());
      
      Face face9 = de0.getFace();
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face4);
      assertNotNull(face9);
      assertNotSame(face9, face6);
      assertSame(face9, face8);
      assertNotSame(face9, face3);
      assertNotSame(face9, face0);
      assertNotSame(face9, face2);
      assertSame(face9, face7);
      assertNotSame(face9, face1);
      assertNotSame(face9, face5);
      assertNotSame(face9, face4);
      assertNull(face9.getNbOR());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbSOL());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      
      de0.setFACE(face3);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotSame(face3, face8);
      assertSame(face3, face6);
      assertNotSame(face3, face2);
      assertNotSame(face3, face7);
      assertNotSame(face3, face9);
      assertNotSame(face3, face1);
      assertSame(face3, face5);
      assertSame(face3, face4);
      assertNotSame(face3, face0);
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face7);
      assertNotSame(face2, face9);
      assertNotSame(face2, face1);
      assertNotSame(face2, face3);
      assertNotSame(face2, face0);
      assertNotSame(face2, face4);
      assertNotSame(face2, face8);
      assertNotSame(face2, face5);
      assertNotSame(face2, face6);
      assertNotSame(face2, face7);
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      
      Face face10 = De.compare2Face(de0.FACE5, face3);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face1);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotNull(face10);
      assertNotSame(face10, face0);
      assertSame(face10, face4);
      assertNotSame(face10, face9);
      assertNotSame(face10, face8);
      assertNotSame(face10, face2);
      assertSame(face10, face5);
      assertNotSame(face10, face7);
      assertNotSame(face10, face1);
      assertSame(face10, face3);
      assertSame(face10, face6);
      assertNotSame(face3, face8);
      assertSame(face3, face6);
      assertNotSame(face3, face2);
      assertNotSame(face3, face7);
      assertNotSame(face3, face9);
      assertNotSame(face3, face1);
      assertSame(face3, face5);
      assertSame(face3, face4);
      assertSame(face3, face10);
      assertNotSame(face3, face0);
      assertEquals(1, (int)face10.getValeur());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbSOL());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbVICT());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotNull(face11);
      assertNotSame(face11, face0);
      assertNotSame(face11, face9);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNotSame(face11, face10);
      assertNotSame(face11, face7);
      assertSame(face11, face2);
      assertNotSame(face11, face4);
      assertNotSame(face11, face3);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbLUN());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotSame(face11, face0);
      assertNotSame(face11, face9);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNotSame(face11, face10);
      assertNotSame(face11, face7);
      assertSame(face11, face2);
      assertNotSame(face11, face4);
      assertNotSame(face11, face3);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbLUN());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face12 = De.compare2Face(face11, face2);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face7);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotEquals(face12, face5);
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face6);
      assertNotEquals(face12, face7);
      assertNotEquals(face12, face0);
      assertNotEquals(face12, face9);
      assertNotEquals(face12, face10);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face3);
      assertNotNull(face12);
      assertNotSame(face2, face9);
      assertNotSame(face2, face10);
      assertNotSame(face2, face1);
      assertNotSame(face2, face3);
      assertNotSame(face2, face0);
      assertNotSame(face2, face4);
      assertNotSame(face2, face8);
      assertNotSame(face2, face5);
      assertSame(face2, face12);
      assertSame(face2, face11);
      assertNotSame(face2, face6);
      assertNotSame(face2, face7);
      assertNotSame(face11, face0);
      assertNotSame(face11, face9);
      assertNotSame(face11, face6);
      assertNotSame(face11, face10);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertSame(face11, face2);
      assertNotSame(face11, face4);
      assertNotSame(face11, face3);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertSame(face11, face12);
      assertNotSame(face12, face5);
      assertNotSame(face12, face4);
      assertNotSame(face12, face8);
      assertSame(face12, face11);
      assertNotSame(face12, face6);
      assertNotSame(face12, face7);
      assertNotSame(face12, face0);
      assertNotSame(face12, face9);
      assertNotSame(face12, face10);
      assertNotSame(face12, face1);
      assertNotSame(face12, face3);
      assertSame(face12, face2);
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbLUN());
      assertNull(face12.getNbVICT());
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(Ressource.LUNAIRE, face12.getRes());
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbLUN());
      assertEquals(1, (int)face12.getValeur());
      
      Face face13 = de0.faceMin();
      assertNotEquals(face13, face12);
      assertNotEquals(face13, face3);
      assertNotEquals(face13, face2);
      assertNotEquals(face13, face5);
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face9);
      assertNotEquals(face13, face11);
      assertNotEquals(face13, face10);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face7);
      assertNotEquals(face13, face0);
      assertNotNull(face13);
      assertNotSame(face13, face12);
      assertNotSame(face13, face3);
      assertNotSame(face13, face2);
      assertNotSame(face13, face5);
      assertNotSame(face13, face4);
      assertNotSame(face13, face8);
      assertNotSame(face13, face6);
      assertNotSame(face13, face9);
      assertNotSame(face13, face11);
      assertNotSame(face13, face10);
      assertNotSame(face13, face1);
      assertNotSame(face13, face7);
      assertNotSame(face13, face0);
      assertNull(face13.getNbLUN());
      assertNull(face13.getNbVICT());
      assertEquals(Type.NORMAL, face13.getType());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Ressource.OR, face13.getRes());
      assertNull(face13.getNbOR());
      assertNull(face13.getNbSOL());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face13);
      assertNotEquals(face11, face1);
      assertNotSame(face11, face9);
      assertNotSame(face11, face10);
      assertSame(face11, face2);
      assertNotSame(face11, face4);
      assertNotSame(face11, face13);
      assertNotSame(face11, face1);
      assertNotSame(face11, face0);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertNotSame(face11, face3);
      assertNotSame(face11, face5);
      assertSame(face11, face12);
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbLUN());
      
      Face face14 = de0.faceMin();
      assertNotEquals(face14, face5);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face9);
      assertNotEquals(face14, face12);
      assertNotEquals(face14, face11);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face7);
      assertNotEquals(face14, face10);
      assertNotEquals(face14, face13);
      assertNotEquals(face14, face1);
      assertNotNull(face14);
      assertNotSame(face14, face5);
      assertNotSame(face14, face4);
      assertNotSame(face14, face2);
      assertNotSame(face14, face0);
      assertNotSame(face14, face6);
      assertNotSame(face14, face8);
      assertNotSame(face14, face9);
      assertNotSame(face14, face12);
      assertNotSame(face14, face11);
      assertNotSame(face14, face3);
      assertNotSame(face14, face7);
      assertNotSame(face14, face10);
      assertNotSame(face14, face13);
      assertNotSame(face14, face1);
      assertNull(face14.getNbVICT());
      assertEquals(Ressource.OR, face14.getRes());
      assertEquals(Type.NORMAL, face14.getType());
      assertNull(face14.getNbSOL());
      assertNull(face14.getNbOR());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbLUN());
      
      Face face15 = de0.getFace();
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face5);
      assertNotEquals(face15, face4);
      assertNotEquals(face15, face14);
      assertNotEquals(face15, face7);
      assertNotEquals(face15, face13);
      assertNotEquals(face15, face1);
      assertNotEquals(face15, face3);
      assertNotEquals(face15, face10);
      assertNotEquals(face15, face9);
      assertNotEquals(face15, face0);
      assertNotEquals(face15, face6);
      assertNotNull(face15);
      assertNotSame(face15, face14);
      assertNotSame(face15, face13);
      assertNotSame(face15, face1);
      assertSame(face15, face12);
      assertNotSame(face15, face3);
      assertNotSame(face15, face9);
      assertNotSame(face15, face6);
      assertNotSame(face15, face8);
      assertNotSame(face15, face5);
      assertNotSame(face15, face4);
      assertNotSame(face15, face7);
      assertNotSame(face15, face10);
      assertSame(face15, face2);
      assertSame(face15, face11);
      assertNotSame(face15, face0);
      assertEquals(Type.NORMAL, face15.getType());
      assertEquals(1, (int)face15.getValeur());
      assertNull(face15.getNbVICT());
      assertNull(face15.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face15.getRes());
      assertNull(face15.getNbSOL());
      assertNull(face15.getNbOR());
      
      String string2 = de0.toString();
      assertNotEquals(string2, string0);
      assertNotEquals(string2, string1);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test11() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.faceMin();
      assertNull(face0);
      
      de0.setFACE(null);
      de0.setFACE(null);
      de0.initDe1();
      de0.FACE2 = null;
      de0.setFACE(de0.FACE6);
      Face face1 = De.compare2Face(de0.FACE4, de0.FACE1);
      assertNotNull(face1);
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      de0.setFACE(null);
  }

  @Test(timeout = 4000)
  public void test12() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.FACE5 = null;
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      assertNull(de0.FACE5.getNbVICT());
      assertNull(de0.FACE5.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE5.getType());
      assertEquals(1, (int)de0.FACE5.getValeur());
      assertNull(de0.FACE5.getNbSOL());
      assertNull(de0.FACE5.getNbOR());
      assertEquals(Ressource.OR, de0.FACE5.getRes());
      
      de0.setFACE(de0.FACE6);
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(de0.FACE6);
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      
      String string2 = de0.toString();
      assertNotEquals(string2, string0);
      assertNotEquals(string2, string1);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertNotEquals(string3, string0);
      assertEquals(string3, string2);
      assertNotEquals(string3, string1);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face1 = de0.faceMin();
      assertNotNull(face1);
      assertSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face2 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      
      de0.initDe1();
      de0.initDe2();
      Face face3 = De.compare2Face(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face3, face2);
      assertNotEquals(face0, face2);
      assertNotNull(face3);
      assertNotSame(face1, face2);
      assertSame(face1, face3);
      assertSame(face1, face0);
      assertSame(face3, face0);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertSame(face0, face1);
      assertNotSame(face0, face2);
      assertSame(face0, face3);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      
      String string4 = de0.toString();
      assertNotEquals(string4, string1);
      assertNotEquals(string4, string3);
      assertNotEquals(string4, string2);
      assertEquals(string4, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string4);
      assertNotNull(string4);
      
      Face face4 = De.compare2Face(de0.FACE1, face3);
      assertNotEquals(face1, face2);
      assertNotEquals(face3, face2);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face1);
      assertNotEquals(face0, face2);
      assertNotNull(face4);
      assertNotSame(face1, face2);
      assertSame(face1, face3);
      assertNotSame(face1, face4);
      assertSame(face1, face0);
      assertNotSame(face3, face4);
      assertSame(face3, face0);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertNotSame(face4, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face3);
      assertNotSame(face4, face1);
      assertSame(face0, face1);
      assertNotSame(face0, face4);
      assertNotSame(face0, face2);
      assertSame(face0, face3);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      
      de0.setFACE(face0);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face2);
      assertSame(face0, face1);
      assertNotSame(face0, face4);
      assertNotSame(face0, face2);
      assertSame(face0, face3);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
  }

  @Test(timeout = 4000)
  public void test13() {
      Random.setNextRandom(1747);
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.FACE5;
      assertNotNull(face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      
      de0.FACE1 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbOR());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbVICT());
      
      de0.setFACE(face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      
      Face face1 = de0.getFace();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      
      Random.setNextRandom(1747);
      de0.FACE3 = face1;
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, de0.FACE3.getRes());
      assertNull(de0.FACE3.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE3.getType());
      assertNull(de0.FACE3.getNbLUN());
      assertNull(de0.FACE3.getNbOR());
      assertNull(de0.FACE3.getNbVICT());
      assertEquals(1, (int)de0.FACE3.getValeur());
      
      de0.FACE2 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbLUN());
      assertNull(de0.FACE2.getNbVICT());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbSOL());
      
      Face face2 = De.compare2Face(face1, de0.FACE2);
      assertNotEquals(face1, face0);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face2, face0);
      assertSame(face2, face1);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(1, (int)face2.getValeur());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face3 = de0.getFace();
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertSame(face3, face0);
      assertNotSame(face3, face2);
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      
      Face face4 = de0.faceMin();
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertSame(face4, face3);
      assertNotSame(face4, face1);
      assertSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      
      Random.setNextRandom(1747);
      Face face5 = de0.getFace();
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face2);
      assertNotNull(face5);
      assertSame(face5, face0);
      assertNotSame(face5, face1);
      assertSame(face5, face3);
      assertNotSame(face5, face2);
      assertSame(face5, face4);
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbVICT());
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      
      Face face6 = de0.getFace();
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face2);
      assertNotNull(face6);
      assertSame(face6, face5);
      assertSame(face6, face4);
      assertNotSame(face6, face1);
      assertSame(face6, face3);
      assertSame(face6, face0);
      assertNotSame(face6, face2);
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbSOL());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
      assertEquals(1, (int)face6.getValeur());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face1);
      assertNotNull(face7);
      assertSame(face7, face6);
      assertSame(face7, face0);
      assertNotSame(face7, face2);
      assertNotSame(face7, face1);
      assertSame(face7, face5);
      assertSame(face7, face4);
      assertSame(face7, face3);
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbSOL());
      assertEquals(Ressource.OR, face7.getRes());
      
      Random.setNextRandom(3);
      Face face8 = de0.getFace();
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face5);
      assertNotNull(face8);
      assertNotSame(face8, face6);
      assertNotSame(face8, face7);
      assertNotSame(face8, face1);
      assertNotSame(face8, face4);
      assertNotSame(face8, face2);
      assertNotSame(face8, face0);
      assertNotSame(face8, face3);
      assertNotSame(face8, face5);
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbVICT());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      
      Random.setNextRandom(1933);
      Random.setNextRandom((-1761));
      Face face9 = de0.getFace();
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face3);
      assertNotNull(face9);
      assertNotSame(face9, face0);
      assertNotSame(face9, face2);
      assertSame(face9, face8);
      assertNotSame(face9, face4);
      assertNotSame(face9, face1);
      assertNotSame(face9, face6);
      assertNotSame(face9, face5);
      assertNotSame(face9, face7);
      assertNotSame(face9, face3);
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbVICT());
      
      Random.setNextRandom(1933);
      Face face10 = de0.faceMin();
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face8);
      assertNotNull(face10);
      assertSame(face10, face0);
      assertNotSame(face10, face1);
      assertSame(face10, face3);
      assertSame(face10, face5);
      assertSame(face10, face6);
      assertNotSame(face10, face2);
      assertSame(face10, face7);
      assertNotSame(face10, face9);
      assertNotSame(face10, face8);
      assertSame(face10, face4);
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbVICT());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      
      Random.setNextRandom(2676);
      Face face11 = de0.getFace();
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face9);
      assertNotNull(face11);
      assertSame(face11, face3);
      assertSame(face11, face6);
      assertNotSame(face11, face1);
      assertSame(face11, face0);
      assertNotSame(face11, face8);
      assertSame(face11, face4);
      assertSame(face11, face5);
      assertNotSame(face11, face2);
      assertSame(face11, face7);
      assertNotSame(face11, face9);
      assertSame(face11, face10);
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbVICT());
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(1, (int)face11.getValeur());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbSOL());
      assertNull(face11.getNbOR());
      
      String string2 = de0.toString();
      assertEquals(string2, string0);
      assertEquals(string2, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      de0.setFACE(face5);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face9);
      assertNotEquals(face5, face8);
      assertSame(face5, face0);
      assertNotSame(face5, face1);
      assertSame(face5, face3);
      assertSame(face5, face10);
      assertSame(face5, face6);
      assertNotSame(face5, face2);
      assertSame(face5, face7);
      assertNotSame(face5, face9);
      assertSame(face5, face11);
      assertNotSame(face5, face8);
      assertSame(face5, face4);
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbVICT());
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      
      Face face12 = De.compare2Face(de0.FACE1, face7);
      assertNotEquals(face7, face8);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face9);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face2);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face9);
      assertNotNull(face12);
      assertSame(face7, face12);
      assertNotSame(face7, face8);
      assertSame(face7, face6);
      assertSame(face7, face0);
      assertNotSame(face7, face2);
      assertNotSame(face7, face1);
      assertSame(face7, face10);
      assertSame(face7, face4);
      assertSame(face7, face5);
      assertNotSame(face7, face9);
      assertSame(face7, face3);
      assertSame(face7, face11);
      assertSame(face12, face11);
      assertNotSame(face12, face8);
      assertSame(face12, face6);
      assertSame(face12, face0);
      assertNotSame(face12, face2);
      assertNotSame(face12, face1);
      assertSame(face12, face4);
      assertSame(face12, face5);
      assertSame(face12, face10);
      assertSame(face12, face3);
      assertNotSame(face12, face9);
      assertSame(face12, face7);
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbSOL());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbVICT());
      assertEquals(Ressource.OR, face12.getRes());
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbSOL());
      
      Face face13 = de0.faceMin();
      assertNotEquals(face13, face9);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face2);
      assertNotNull(face13);
      assertSame(face13, face4);
      assertNotSame(face13, face9);
      assertSame(face13, face3);
      assertSame(face13, face12);
      assertNotSame(face13, face1);
      assertSame(face13, face5);
      assertSame(face13, face10);
      assertNotSame(face13, face8);
      assertSame(face13, face11);
      assertSame(face13, face6);
      assertSame(face13, face7);
      assertSame(face13, face0);
      assertNotSame(face13, face2);
      assertEquals(Ressource.OR, face13.getRes());
      assertEquals(1, (int)face13.getValeur());
      assertNull(face13.getNbSOL());
      assertEquals(Type.NORMAL, face13.getType());
      assertNull(face13.getNbVICT());
      assertNull(face13.getNbOR());
      assertNull(face13.getNbLUN());
      
      Face face14 = De.compare2Face(de0.FACE6, face10);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face9);
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face8);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face8);
      assertNotNull(face14);
      assertNotSame(face14, face2);
      assertNotSame(face14, face9);
      assertSame(face14, face7);
      assertSame(face14, face12);
      assertNotSame(face14, face1);
      assertSame(face14, face11);
      assertNotSame(face14, face8);
      assertSame(face14, face4);
      assertSame(face14, face5);
      assertSame(face14, face10);
      assertSame(face14, face3);
      assertSame(face14, face13);
      assertSame(face14, face6);
      assertSame(face14, face0);
      assertSame(face10, face14);
      assertSame(face10, face0);
      assertSame(face10, face5);
      assertSame(face10, face13);
      assertSame(face10, face6);
      assertSame(face10, face7);
      assertSame(face10, face4);
      assertSame(face10, face11);
      assertNotSame(face10, face8);
      assertNotSame(face10, face1);
      assertSame(face10, face3);
      assertSame(face10, face12);
      assertNotSame(face10, face2);
      assertNotSame(face10, face9);
      assertEquals(Ressource.OR, face14.getRes());
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbSOL());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbVICT());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbVICT());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
  }

  @Test(timeout = 4000)
  public void test14() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE3;
      assertNotNull(face0);
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      
      de0.FACE2 = face0;
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbVICT());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbLUN());
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      
      de0.initDe1();
      de0.initDe2();
      Face face2 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbLUN());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face2);
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face3);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face2);
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      Face face4 = De.compare2Face(de0.FACE1, de0.FACE2);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotNull(face4);
      assertNotSame(face4, face0);
      assertSame(face4, face3);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbOR());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.setFACE(face4);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotSame(face4, face0);
      assertSame(face4, face3);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbOR());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.initDe2();
      de0.setFACE(face3);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face2);
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      Face face5 = De.compare2Face(face4, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face0);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotNull(face5);
      assertNotSame(face5, face1);
      assertSame(face5, face3);
      assertNotSame(face5, face2);
      assertNotSame(face5, face0);
      assertSame(face5, face4);
      assertNotSame(face4, face0);
      assertSame(face4, face5);
      assertSame(face4, face3);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNull(face5.getNbVICT());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbSOL());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbOR());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face4.getNbSOL());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbOR());
      assertEquals(Ressource.OR, face4.getRes());
      
      de0.initDe2();
      Face face6 = De.compare2Face(face3, face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face5);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotNull(face6);
      assertNotSame(face0, face2);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertNotSame(face0, face1);
      assertNotSame(face0, face5);
      assertNotSame(face0, face6);
      assertSame(face6, face5);
      assertSame(face6, face4);
      assertNotSame(face6, face1);
      assertSame(face6, face3);
      assertNotSame(face6, face0);
      assertNotSame(face6, face2);
      assertSame(face3, face6);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face5);
      assertNotSame(face3, face2);
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbOR());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      Face face7 = De.compare2Face(face6, de0.FACE4);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face6);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotNull(face7);
      assertNotSame(face0, face2);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertNotSame(face0, face7);
      assertNotSame(face0, face1);
      assertNotSame(face0, face5);
      assertNotSame(face0, face6);
      assertSame(face6, face5);
      assertSame(face6, face4);
      assertSame(face6, face7);
      assertNotSame(face6, face1);
      assertSame(face6, face3);
      assertNotSame(face6, face0);
      assertNotSame(face6, face2);
      assertNotSame(face7, face1);
      assertSame(face7, face6);
      assertSame(face7, face4);
      assertNotSame(face7, face0);
      assertSame(face7, face5);
      assertSame(face7, face3);
      assertNotSame(face7, face2);
      assertSame(face3, face6);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertSame(face3, face7);
      assertNotSame(face3, face0);
      assertSame(face3, face5);
      assertNotSame(face3, face2);
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbOR());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
      assertNull(face7.getNbLUN());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbSOL());
      assertEquals(1, (int)face7.getValeur());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbVICT());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      Face face8 = de0.faceMin();
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face0);
      assertNotNull(face8);
      assertNotSame(face8, face7);
      assertNotSame(face8, face3);
      assertNotSame(face8, face2);
      assertNotSame(face8, face4);
      assertNotSame(face8, face5);
      assertNotSame(face8, face1);
      assertNotSame(face8, face6);
      assertNotSame(face8, face0);
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbVICT());
      
      Face face9 = de0.getFace();
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face0);
      assertNotNull(face9);
      assertNotSame(face9, face4);
      assertNotSame(face9, face7);
      assertNotSame(face9, face1);
      assertNotSame(face9, face5);
      assertSame(face9, face8);
      assertNotSame(face9, face3);
      assertNotSame(face9, face6);
      assertNotSame(face9, face2);
      assertNotSame(face9, face0);
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbVICT());
      
      de0.setFACE(face3);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertSame(face3, face6);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertSame(face3, face7);
      assertNotSame(face3, face8);
      assertNotSame(face3, face9);
      assertNotSame(face3, face0);
      assertSame(face3, face5);
      assertNotSame(face3, face2);
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face7);
      assertNotSame(face2, face1);
      assertNotSame(face2, face9);
      assertNotSame(face2, face5);
      assertNotSame(face2, face3);
      assertNotSame(face2, face0);
      assertNotSame(face2, face6);
      assertNotSame(face2, face8);
      assertNotSame(face2, face4);
      assertNotSame(face2, face7);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbLUN());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      
      Face face10 = De.compare2Face(de0.FACE5, face3);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotNull(face10);
      assertNotSame(face10, face8);
      assertSame(face10, face3);
      assertSame(face10, face4);
      assertSame(face10, face7);
      assertNotSame(face10, face0);
      assertNotSame(face10, face9);
      assertNotSame(face10, face1);
      assertSame(face10, face6);
      assertNotSame(face10, face2);
      assertSame(face10, face5);
      assertSame(face3, face10);
      assertSame(face3, face6);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertSame(face3, face7);
      assertNotSame(face3, face8);
      assertNotSame(face3, face9);
      assertNotSame(face3, face0);
      assertSame(face3, face5);
      assertNotSame(face3, face2);
      assertNull(face10.getNbVICT());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotNull(face11);
      assertNotSame(face11, face0);
      assertNotSame(face11, face6);
      assertNotSame(face11, face3);
      assertNotSame(face11, face10);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertSame(face11, face2);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertNotSame(face11, face4);
      assertNotSame(face11, face9);
      assertNull(face11.getNbSOL());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertEquals(Type.NORMAL, face11.getType());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotSame(face11, face0);
      assertNotSame(face11, face6);
      assertNotSame(face11, face3);
      assertNotSame(face11, face10);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertSame(face11, face2);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertNotSame(face11, face4);
      assertNotSame(face11, face9);
      assertNull(face11.getNbSOL());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertEquals(Type.NORMAL, face11.getType());
      
      de0.initDe2();
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face12 = De.compare2Face(face11, face2);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face7);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotEquals(face12, face6);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face10);
      assertNotEquals(face12, face0);
      assertNotEquals(face12, face3);
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face9);
      assertNotEquals(face12, face7);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face5);
      assertNotNull(face12);
      assertNotSame(face2, face1);
      assertNotSame(face2, face9);
      assertNotSame(face2, face5);
      assertNotSame(face2, face3);
      assertNotSame(face2, face10);
      assertSame(face2, face11);
      assertNotSame(face2, face0);
      assertSame(face2, face12);
      assertNotSame(face2, face6);
      assertNotSame(face2, face8);
      assertNotSame(face2, face4);
      assertNotSame(face2, face7);
      assertNotSame(face11, face0);
      assertNotSame(face11, face6);
      assertSame(face11, face12);
      assertNotSame(face11, face3);
      assertNotSame(face11, face10);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertSame(face11, face2);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertNotSame(face11, face9);
      assertNotSame(face11, face4);
      assertNotSame(face12, face6);
      assertSame(face12, face11);
      assertNotSame(face12, face8);
      assertNotSame(face12, face10);
      assertNotSame(face12, face0);
      assertNotSame(face12, face3);
      assertNotSame(face12, face9);
      assertNotSame(face12, face4);
      assertNotSame(face12, face7);
      assertNotSame(face12, face1);
      assertSame(face12, face2);
      assertNotSame(face12, face5);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbLUN());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face11.getNbSOL());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face12.getRes());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbOR());
      
      Face face13 = de0.faceMin();
      assertNotEquals(face13, face12);
      assertNotEquals(face13, face0);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face7);
      assertNotEquals(face13, face2);
      assertNotEquals(face13, face11);
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face10);
      assertNotEquals(face13, face9);
      assertNotEquals(face13, face3);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face5);
      assertNotNull(face13);
      assertNotSame(face13, face12);
      assertNotSame(face13, face0);
      assertNotSame(face13, face8);
      assertNotSame(face13, face4);
      assertNotSame(face13, face7);
      assertNotSame(face13, face2);
      assertNotSame(face13, face11);
      assertNotSame(face13, face6);
      assertNotSame(face13, face10);
      assertNotSame(face13, face9);
      assertNotSame(face13, face3);
      assertNotSame(face13, face1);
      assertNotSame(face13, face5);
      assertEquals(Ressource.OR, face13.getRes());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Type.NORMAL, face13.getType());
      assertNull(face13.getNbVICT());
      assertNull(face13.getNbLUN());
      assertNull(face13.getNbOR());
      assertNull(face13.getNbSOL());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face13);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotSame(face11, face6);
      assertNotSame(face11, face13);
      assertNotSame(face11, face8);
      assertNotSame(face11, face9);
      assertNotSame(face11, face0);
      assertSame(face11, face12);
      assertNotSame(face11, face3);
      assertNotSame(face11, face10);
      assertNotSame(face11, face5);
      assertNotSame(face11, face1);
      assertSame(face11, face2);
      assertNotSame(face11, face7);
      assertNotSame(face11, face4);
      assertNull(face11.getNbSOL());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face11.getRes());
      assertEquals(Type.NORMAL, face11.getType());
      
      de0.initDe1();
      Random.setNextRandom(4);
      Face face14 = de0.getFace();
      assertNotEquals(face14, face5);
      assertNotEquals(face14, face13);
      assertNotEquals(face14, face9);
      assertNotEquals(face14, face12);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face11);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face7);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face10);
      assertNotNull(face14);
      assertNotSame(face14, face5);
      assertNotSame(face14, face13);
      assertNotSame(face14, face9);
      assertNotSame(face14, face12);
      assertNotSame(face14, face6);
      assertNotSame(face14, face8);
      assertNotSame(face14, face3);
      assertNotSame(face14, face1);
      assertNotSame(face14, face11);
      assertNotSame(face14, face4);
      assertNotSame(face14, face7);
      assertNotSame(face14, face0);
      assertNotSame(face14, face2);
      assertNotSame(face14, face10);
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbVICT());
      
      Face face15 = De.compare2Face(face1, face8);
      assertNotEquals(face1, face8);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face12);
      assertNotEquals(face1, face14);
      assertNotEquals(face1, face11);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face13);
      assertNotEquals(face1, face9);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face10);
      assertNotEquals(face1, face3);
      assertNotEquals(face15, face0);
      assertNotEquals(face15, face14);
      assertNotEquals(face15, face2);
      assertNotEquals(face15, face9);
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face10);
      assertNotEquals(face15, face11);
      assertNotEquals(face15, face6);
      assertNotEquals(face15, face4);
      assertNotEquals(face15, face7);
      assertNotEquals(face15, face12);
      assertNotEquals(face15, face5);
      assertNotEquals(face15, face13);
      assertNotEquals(face15, face3);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face11);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face12);
      assertNotEquals(face8, face13);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face14);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face10);
      assertNotNull(face15);
      assertNotSame(face1, face8);
      assertNotSame(face1, face4);
      assertNotSame(face1, face7);
      assertNotSame(face1, face0);
      assertNotSame(face1, face12);
      assertNotSame(face1, face14);
      assertNotSame(face1, face11);
      assertNotSame(face1, face5);
      assertNotSame(face1, face13);
      assertNotSame(face1, face9);
      assertNotSame(face1, face6);
      assertNotSame(face1, face2);
      assertNotSame(face1, face10);
      assertSame(face1, face15);
      assertNotSame(face1, face3);
      assertNotSame(face15, face0);
      assertNotSame(face15, face14);
      assertNotSame(face15, face2);
      assertNotSame(face15, face9);
      assertNotSame(face15, face8);
      assertNotSame(face15, face10);
      assertNotSame(face15, face11);
      assertNotSame(face15, face6);
      assertNotSame(face15, face4);
      assertNotSame(face15, face7);
      assertNotSame(face15, face12);
      assertNotSame(face15, face5);
      assertNotSame(face15, face13);
      assertNotSame(face15, face3);
      assertSame(face15, face1);
      assertNotSame(face8, face7);
      assertNotSame(face8, face3);
      assertNotSame(face8, face4);
      assertNotSame(face8, face11);
      assertNotSame(face8, face1);
      assertNotSame(face8, face15);
      assertNotSame(face8, face6);
      assertNotSame(face8, face12);
      assertNotSame(face8, face13);
      assertNotSame(face8, face2);
      assertNotSame(face8, face5);
      assertSame(face8, face9);
      assertNotSame(face8, face14);
      assertNotSame(face8, face0);
      assertNotSame(face8, face10);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertNull(face15.getNbSOL());
      assertEquals(Ressource.OR, face15.getRes());
      assertEquals(Type.NORMAL, face15.getType());
      assertNull(face15.getNbVICT());
      assertNull(face15.getNbLUN());
      assertEquals(1, (int)face15.getValeur());
      assertNull(face15.getNbOR());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test15() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.FACE6;
      assertNull(face0);
      
      de0.setFACE(null);
      De de1 = new De();
      assertNotEquals(de1, de0);
      assertNotNull(de1);
      
      de1.FACE6 = null;
      Face face1 = de1.FACE1;
      assertNull(face1);
      
      de0.setFACE(null);
      assertNotEquals(de0, de1);
      assertNotSame(de0, de1);
      
      Face face2 = de1.faceMin();
      assertNotEquals(de1, de0);
      assertNull(face2);
      assertNotSame(de1, de0);
      
      Face face3 = de0.getFace();
      assertNotEquals(de0, de1);
      assertNull(face3);
      assertNotSame(de0, de1);
      
      Face face4 = de0.faceMin();
      assertNotEquals(de0, de1);
      assertNull(face4);
      assertNotSame(de0, de1);
      
      Random.setNextRandom((-430));
      Face face5 = de1.faceMin();
      assertNotEquals(de1, de0);
      assertNull(face5);
      assertNotSame(de1, de0);
      
      de1.setFACE(null);
      assertNotEquals(de1, de0);
      assertNotSame(de1, de0);
      
      de1.setFACE(null);
      assertNotEquals(de1, de0);
      assertNotSame(de1, de0);
      
      Face face6 = de0.faceMin();
      assertNotEquals(de0, de1);
      assertNull(face6);
      assertNotSame(de0, de1);
      
      Face face7 = de0.faceMin();
      assertNotEquals(de0, de1);
      assertNull(face7);
      assertNotSame(de0, de1);
      
      Face face8 = de1.getFace();
      assertNotEquals(de1, de0);
      assertNull(face8);
      assertNotSame(de1, de0);
      
      de0.FACE2 = null;
      Random.setNextRandom(1761);
      Face face9 = de1.faceMin();
      assertNotEquals(de1, de0);
      assertNull(face9);
      assertNotSame(de1, de0);
      
      Face face10 = de1.getFace();
      assertNotEquals(de1, de0);
      assertNull(face10);
      assertNotSame(de1, de0);
  }

  @Test(timeout = 4000)
  public void test16() {
      Random.setNextRandom(6053);
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.getFace();
      assertNull(face0);
  }

  @Test(timeout = 4000)
  public void test17() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.FACE6;
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      
      de0.FACE5 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertNull(de0.FACE5.getNbVICT());
      assertNull(de0.FACE5.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE5.getType());
      assertEquals(Ressource.SOLAIRE, de0.FACE5.getRes());
      assertNull(de0.FACE5.getNbSOL());
      assertEquals(1, (int)de0.FACE5.getValeur());
      assertNull(de0.FACE5.getNbOR());
      
      de0.FACE1 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbOR());
      assertEquals(Ressource.SOLAIRE, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbVICT());
      
      de0.FACE1 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbOR());
      assertEquals(Ressource.SOLAIRE, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbVICT());
      
      de0.FACE2 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(Ressource.SOLAIRE, de0.FACE2.getRes());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbVICT());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbOR());
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      
      Face face2 = de0.faceMin();
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertSame(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      
      Face face4 = De.compare2Face(de0.FACE1, de0.FACE1);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face4, face1);
      assertSame(face4, face0);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.SOLAIRE, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(Type.NORMAL, face4.getType());
      
      de0.initDe2();
      de0.initDe2();
      de0.initDe1();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.initDe1();
      Face face5 = de0.faceMin();
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotNull(face5);
      assertNotSame(face5, face2);
      assertNotSame(face5, face4);
      assertNotSame(face5, face0);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbLUN());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbOR());
      
      Face face6 = de0.getFace();
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face3);
      assertNotNull(face6);
      assertNotSame(face6, face2);
      assertNotSame(face6, face1);
      assertNotSame(face6, face4);
      assertNotSame(face6, face0);
      assertNotSame(face6, face3);
      assertSame(face6, face5);
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
      
      Face face7 = de0.faceMin();
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face3);
      assertNotNull(face7);
      assertSame(face7, face5);
      assertNotSame(face7, face1);
      assertNotSame(face7, face2);
      assertNotSame(face7, face4);
      assertNotSame(face7, face0);
      assertSame(face7, face6);
      assertNotSame(face7, face3);
      assertNull(face7.getNbSOL());
      assertEquals(Ressource.OR, face7.getRes());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbOR());
      
      de0.initDe2();
      de0.initDe2();
      Face face8 = De.compare2Face(de0.FACE5, face7);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face3);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face3);
      assertNotNull(face8);
      assertSame(face7, face5);
      assertNotSame(face7, face1);
      assertNotSame(face7, face2);
      assertNotSame(face7, face4);
      assertNotSame(face7, face0);
      assertSame(face7, face6);
      assertSame(face7, face8);
      assertNotSame(face7, face3);
      assertSame(face8, face5);
      assertSame(face8, face6);
      assertNotSame(face8, face2);
      assertNotSame(face8, face1);
      assertSame(face8, face7);
      assertNotSame(face8, face0);
      assertNotSame(face8, face4);
      assertNotSame(face8, face3);
      assertNull(face7.getNbSOL());
      assertEquals(Ressource.OR, face7.getRes());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbOR());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbOR());
      
      de0.initDe2();
      Face face9 = de0.getFace();
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face3);
      assertNotNull(face9);
      assertNotSame(face9, face5);
      assertNotSame(face9, face1);
      assertNotSame(face9, face6);
      assertNotSame(face9, face8);
      assertNotSame(face9, face2);
      assertNotSame(face9, face7);
      assertNotSame(face9, face0);
      assertNotSame(face9, face4);
      assertNotSame(face9, face3);
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      
      de0.setFACE(face9);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face3);
      assertNotSame(face9, face5);
      assertNotSame(face9, face1);
      assertNotSame(face9, face6);
      assertNotSame(face9, face8);
      assertNotSame(face9, face2);
      assertNotSame(face9, face7);
      assertNotSame(face9, face0);
      assertNotSame(face9, face4);
      assertNotSame(face9, face3);
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face6);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face9);
      assertNotEquals(face6, face3);
      assertNotSame(face6, face2);
      assertNotSame(face6, face1);
      assertSame(face6, face8);
      assertNotSame(face6, face4);
      assertNotSame(face6, face0);
      assertNotSame(face6, face9);
      assertSame(face6, face7);
      assertNotSame(face6, face3);
      assertSame(face6, face5);
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test18() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = De.compare2Face(de0.FACE1, de0.FACE4);
      assertNotNull(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      
      de0.setFACE(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      
      de0.initDe2();
      Face face1 = de0.getFace();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      
      de0.initDe2();
      de0.FACE1 = face1;
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbOR());
      
      Face face2 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      
      Face face3 = De.compare2Face(de0.FACE6, de0.FACE3);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertNotSame(face3, face0);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      de0.setFACE(de0.FACE4);
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.initDe1();
      Face face4 = de0.getFace();
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      
      de0.setFACE(face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face4);
      assertNotEquals(face0, face3);
      assertNotSame(face0, face2);
      assertNotSame(face0, face1);
      assertNotSame(face0, face4);
      assertNotSame(face0, face3);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      
      Face face5 = de0.faceMin();
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face2);
      assertNotNull(face5);
      assertSame(face5, face0);
      assertNotSame(face5, face4);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertNotSame(face5, face2);
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      
      de0.setFACE(de0.FACE2);
      de0.initDe2();
      de0.FACE2 = face2;
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbSOL());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(Ressource.LUNAIRE, de0.FACE2.getRes());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbVICT());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      String string2 = de0.toString();
      assertNotEquals(string2, string0);
      assertEquals(string2, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face6 = De.compare2Face(de0.FACE2, de0.FACE6);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face4);
      assertNotNull(face6);
      assertNotSame(face6, face1);
      assertNotSame(face6, face0);
      assertNotSame(face6, face5);
      assertNotSame(face6, face3);
      assertNotSame(face6, face4);
      assertSame(face6, face2);
      assertEquals(1, (int)face6.getValeur());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face6.getRes());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
      
      Face face7 = De.compare2Face(face4, de0.FACE1);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face3);
      assertNotEquals(face4, face6);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face5);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotNull(face7);
      assertNotSame(face7, face6);
      assertNotSame(face7, face5);
      assertNotSame(face7, face0);
      assertNotSame(face7, face1);
      assertNotSame(face7, face2);
      assertSame(face7, face4);
      assertNotSame(face7, face3);
      assertNotSame(face4, face6);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertNotSame(face4, face5);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertSame(face4, face7);
      assertNull(face7.getNbSOL());
      assertNull(face7.getNbOR());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbVICT());
      assertEquals(Ressource.OR, face7.getRes());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      
      String string3 = de0.toString();
      assertNotEquals(string3, string0);
      assertEquals(string3, string1);
      assertEquals(string3, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      de0.initDe1();
      Face face8 = De.compare2Face(de0.FACE6, face6);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face7);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face4);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face4);
      assertNotNull(face8);
      assertNotSame(face6, face1);
      assertNotSame(face6, face0);
      assertNotSame(face6, face7);
      assertNotSame(face6, face5);
      assertSame(face6, face8);
      assertNotSame(face6, face3);
      assertNotSame(face6, face4);
      assertSame(face6, face2);
      assertSame(face8, face6);
      assertNotSame(face8, face3);
      assertNotSame(face8, face7);
      assertNotSame(face8, face5);
      assertSame(face8, face2);
      assertNotSame(face8, face1);
      assertNotSame(face8, face0);
      assertNotSame(face8, face4);
      assertEquals(1, (int)face6.getValeur());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face6.getRes());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbVICT());
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face8.getRes());
      assertNull(face8.getNbOR());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbLUN());
      
      Face face9 = de0.faceMin();
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face6);
      assertNotNull(face9);
      assertNotSame(face9, face5);
      assertNotSame(face9, face3);
      assertNotSame(face9, face4);
      assertNotSame(face9, face7);
      assertNotSame(face9, face2);
      assertNotSame(face9, face0);
      assertNotSame(face9, face8);
      assertNotSame(face9, face1);
      assertNotSame(face9, face6);
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbVICT());
      assertEquals(Type.NORMAL, face9.getType());
      
      de0.initDe1();
      String string4 = de0.toString();
      assertNotEquals(string4, string1);
      assertNotEquals(string4, string2);
      assertNotEquals(string4, string3);
      assertNotEquals(string4, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string4);
      assertNotNull(string4);
      
      Face face10 = de0.FACE2;
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face2);
      assertNotNull(face10);
      assertNotSame(face10, face0);
      assertNotSame(face10, face3);
      assertNotSame(face10, face9);
      assertNotSame(face10, face1);
      assertNotSame(face10, face6);
      assertNotSame(face10, face4);
      assertNotSame(face10, face7);
      assertNotSame(face10, face5);
      assertNotSame(face10, face8);
      assertNotSame(face10, face2);
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbOR());
      assertEquals(1, (int)face10.getValeur());
      
      de0.setFACE(face10);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face3);
      assertNotSame(face10, face9);
      assertNotSame(face10, face1);
      assertNotSame(face10, face6);
      assertNotSame(face10, face4);
      assertNotSame(face10, face7);
      assertNotSame(face10, face5);
      assertNotSame(face10, face8);
      assertNotSame(face10, face2);
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbOR());
      assertEquals(1, (int)face10.getValeur());
      
      String string5 = de0.toString();
      assertEquals(string5, string4);
      assertNotEquals(string5, string3);
      assertNotEquals(string5, string2);
      assertNotEquals(string5, string0);
      assertNotEquals(string5, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test19() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      
      de0.FACE1 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertNull(de0.FACE1.getNbOR());
      assertNull(de0.FACE1.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbLUN());
      assertEquals(1, (int)de0.FACE1.getValeur());
      
      de0.FACE6 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertNull(de0.FACE6.getNbVICT());
      assertNull(de0.FACE6.getNbLUN());
      assertEquals(Ressource.OR, de0.FACE6.getRes());
      assertNull(de0.FACE6.getNbOR());
      assertEquals(1, (int)de0.FACE6.getValeur());
      assertNull(de0.FACE6.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE6.getType());
      
      Face face1 = de0.FACE1;
      assertNotNull(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      
      de0.setFACE(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      
      Face face2 = de0.faceMin();
      assertNotNull(face2);
      assertSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m", string0);
      assertNotNull(string0);
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m", string1);
      assertNotNull(string1);
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m", string2);
      assertNotNull(string2);
      
      Random.setNextRandom(4034);
      Face face3 = De.compare2Face(face1, face0);
      assertNotNull(face3);
      assertSame(face0, face1);
      assertSame(face0, face2);
      assertSame(face0, face3);
      assertSame(face1, face0);
      assertSame(face1, face2);
      assertSame(face1, face3);
      assertSame(face3, face2);
      assertSame(face3, face1);
      assertSame(face3, face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      
      Random.setNextRandom((-623));
      Face face4 = De.compare2Face(face2, de0.FACE3);
      assertNotNull(face4);
      assertSame(face2, face4);
      assertSame(face2, face0);
      assertSame(face2, face1);
      assertSame(face2, face3);
      assertSame(face4, face0);
      assertSame(face4, face3);
      assertSame(face4, face1);
      assertSame(face4, face2);
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      
      Face face5 = de0.faceMin();
      assertNotNull(face5);
      assertSame(face5, face2);
      assertSame(face5, face3);
      assertSame(face5, face1);
      assertSame(face5, face0);
      assertSame(face5, face4);
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      
      de0.setFACE(face0);
      assertSame(face0, face1);
      assertSame(face0, face5);
      assertSame(face0, face2);
      assertSame(face0, face4);
      assertSame(face0, face3);
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test20() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.FACE1;
      assertNotNull(face0);
      assertNull(face0.getNbVICT());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      
      de0.setFACE(face0);
      assertNull(face0.getNbVICT());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      
      Face face1 = de0.getFace();
      assertNotNull(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      
      Face face2 = de0.faceMin();
      assertNotNull(face2);
      assertSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      
      Random.setNextRandom((-1));
      Face face3 = de0.faceMin();
      assertNotNull(face3);
      assertSame(face3, face1);
      assertSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      
      de0.setFACE(face3);
      assertSame(face3, face1);
      assertSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      
      Face face4 = De.compare2Face(de0.FACE1, de0.FACE4);
      assertNotNull(face4);
      assertSame(face4, face0);
      assertSame(face4, face3);
      assertSame(face4, face1);
      assertSame(face4, face2);
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face5 = de0.faceMin();
      assertNotNull(face5);
      assertSame(face5, face0);
      assertSame(face5, face2);
      assertSame(face5, face4);
      assertSame(face5, face1);
      assertSame(face5, face3);
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      
      Face face6 = de0.getFace();
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face1);
      assertNotNull(face6);
      assertNotSame(face6, face5);
      assertNotSame(face6, face2);
      assertNotSame(face6, face0);
      assertNotSame(face6, face4);
      assertNotSame(face6, face3);
      assertNotSame(face6, face1);
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbLUN());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face5);
      assertNotNull(face7);
      assertNotSame(face7, face0);
      assertNotSame(face7, face2);
      assertSame(face7, face6);
      assertNotSame(face7, face1);
      assertNotSame(face7, face4);
      assertNotSame(face7, face3);
      assertNotSame(face7, face5);
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      
      Face face8 = De.compare2Face(de0.FACE6, de0.FACE3);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face6);
      assertNotNull(face8);
      assertNotSame(face8, face7);
      assertNotSame(face8, face0);
      assertNotSame(face8, face2);
      assertNotSame(face8, face1);
      assertNotSame(face8, face3);
      assertNotSame(face8, face5);
      assertNotSame(face8, face4);
      assertNotSame(face8, face6);
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbSOL());
      
      Face face9 = De.compare2Face(face3, face1);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face8);
      assertNotEquals(face3, face6);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face8);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertNotNull(face9);
      assertNotSame(face1, face6);
      assertSame(face1, face4);
      assertSame(face1, face5);
      assertSame(face1, face2);
      assertSame(face1, face9);
      assertSame(face1, face0);
      assertNotSame(face1, face7);
      assertNotSame(face1, face8);
      assertSame(face1, face3);
      assertSame(face3, face5);
      assertSame(face3, face4);
      assertSame(face3, face1);
      assertNotSame(face3, face6);
      assertSame(face3, face0);
      assertNotSame(face3, face7);
      assertSame(face3, face2);
      assertSame(face3, face9);
      assertNotSame(face3, face8);
      assertSame(face9, face0);
      assertSame(face9, face5);
      assertSame(face9, face2);
      assertNotSame(face9, face7);
      assertSame(face9, face3);
      assertNotSame(face9, face6);
      assertSame(face9, face1);
      assertSame(face9, face4);
      assertNotSame(face9, face8);
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbVICT());
      
      Face face10 = de0.faceMin();
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face8);
      assertNotNull(face10);
      assertSame(face10, face0);
      assertSame(face10, face9);
      assertSame(face10, face5);
      assertSame(face10, face2);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertSame(face10, face3);
      assertNotSame(face10, face6);
      assertSame(face10, face4);
      assertNotSame(face10, face8);
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbVICT());
      
      de0.setFACE(face6);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face10);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face9);
      assertNotEquals(face6, face8);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face1);
      assertNotSame(face6, face5);
      assertNotSame(face6, face2);
      assertNotSame(face6, face10);
      assertNotSame(face6, face0);
      assertNotSame(face6, face9);
      assertNotSame(face6, face8);
      assertNotSame(face6, face4);
      assertSame(face6, face7);
      assertNotSame(face6, face3);
      assertNotSame(face6, face1);
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbLUN());
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face10);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face8);
      assertSame(face10, face0);
      assertSame(face10, face9);
      assertSame(face10, face5);
      assertSame(face10, face2);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertSame(face10, face3);
      assertNotSame(face10, face6);
      assertSame(face10, face4);
      assertNotSame(face10, face8);
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbVICT());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face7);
      assertNotNull(face11);
      assertSame(face11, face0);
      assertSame(face11, face9);
      assertNotSame(face11, face6);
      assertSame(face11, face4);
      assertSame(face11, face1);
      assertSame(face11, face3);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertSame(face11, face5);
      assertSame(face11, face10);
      assertSame(face11, face2);
      assertNull(face11.getNbSOL());
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbOR());
      
      Face face12 = De.compare2Face(face9, face2);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face8);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face7);
      assertNotEquals(face12, face6);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face7);
      assertNotEquals(face3, face6);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face8);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertNotNull(face12);
      assertSame(face1, face10);
      assertNotSame(face1, face6);
      assertSame(face1, face4);
      assertSame(face1, face5);
      assertSame(face1, face11);
      assertSame(face1, face2);
      assertSame(face1, face9);
      assertSame(face1, face0);
      assertNotSame(face1, face7);
      assertNotSame(face1, face8);
      assertSame(face1, face12);
      assertSame(face1, face3);
      assertSame(face12, face2);
      assertNotSame(face12, face8);
      assertNotSame(face12, face7);
      assertSame(face12, face1);
      assertSame(face12, face3);
      assertSame(face12, face5);
      assertSame(face12, face4);
      assertSame(face12, face10);
      assertNotSame(face12, face6);
      assertSame(face12, face11);
      assertSame(face12, face0);
      assertSame(face12, face9);
      assertNotSame(face2, face8);
      assertSame(face2, face12);
      assertSame(face2, face9);
      assertSame(face2, face0);
      assertNotSame(face2, face6);
      assertSame(face2, face4);
      assertSame(face2, face11);
      assertSame(face2, face1);
      assertSame(face2, face3);
      assertSame(face2, face10);
      assertSame(face2, face5);
      assertNotSame(face2, face7);
      assertSame(face3, face5);
      assertSame(face3, face4);
      assertSame(face3, face1);
      assertNotSame(face3, face6);
      assertSame(face3, face11);
      assertSame(face3, face0);
      assertNotSame(face3, face7);
      assertSame(face3, face10);
      assertSame(face3, face2);
      assertSame(face3, face12);
      assertSame(face3, face9);
      assertNotSame(face3, face8);
      assertSame(face9, face0);
      assertSame(face9, face12);
      assertSame(face9, face10);
      assertSame(face9, face5);
      assertSame(face9, face2);
      assertSame(face9, face11);
      assertNotSame(face9, face7);
      assertNotSame(face9, face6);
      assertSame(face9, face3);
      assertSame(face9, face1);
      assertSame(face9, face4);
      assertNotSame(face9, face8);
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(1, (int)face12.getValeur());
      assertEquals(Ressource.OR, face12.getRes());
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbVICT());
      
      de0.setFACE(face10);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face8);
      assertSame(face10, face0);
      assertSame(face10, face12);
      assertSame(face10, face9);
      assertSame(face10, face5);
      assertSame(face10, face2);
      assertSame(face10, face11);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face6);
      assertSame(face10, face3);
      assertSame(face10, face4);
      assertNotSame(face10, face8);
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbVICT());
      
      Face face13 = De.compare2Face(face10, face9);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face8);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face8);
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face7);
      assertNotEquals(face13, face8);
      assertNotEquals(face3, face6);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face8);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertNotNull(face13);
      assertSame(face10, face9);
      assertSame(face10, face5);
      assertSame(face10, face11);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face6);
      assertSame(face10, face4);
      assertSame(face10, face0);
      assertSame(face10, face12);
      assertSame(face10, face2);
      assertSame(face10, face13);
      assertSame(face10, face3);
      assertNotSame(face10, face8);
      assertSame(face1, face10);
      assertSame(face1, face4);
      assertSame(face1, face11);
      assertSame(face1, face2);
      assertSame(face1, face0);
      assertNotSame(face1, face7);
      assertNotSame(face1, face6);
      assertSame(face1, face5);
      assertSame(face1, face9);
      assertSame(face1, face13);
      assertNotSame(face1, face8);
      assertSame(face1, face12);
      assertSame(face1, face3);
      assertSame(face13, face4);
      assertSame(face13, face3);
      assertSame(face13, face11);
      assertSame(face13, face0);
      assertSame(face13, face10);
      assertSame(face13, face2);
      assertSame(face13, face12);
      assertNotSame(face13, face8);
      assertSame(face13, face1);
      assertSame(face13, face5);
      assertNotSame(face13, face6);
      assertSame(face13, face9);
      assertNotSame(face13, face7);
      assertSame(face3, face5);
      assertSame(face3, face1);
      assertNotSame(face3, face6);
      assertNotSame(face3, face7);
      assertSame(face3, face2);
      assertSame(face3, face12);
      assertSame(face3, face9);
      assertSame(face3, face13);
      assertNotSame(face3, face8);
      assertSame(face3, face4);
      assertSame(face3, face11);
      assertSame(face3, face0);
      assertSame(face3, face10);
      assertSame(face9, face5);
      assertSame(face9, face13);
      assertSame(face9, face3);
      assertNotSame(face9, face8);
      assertSame(face9, face0);
      assertSame(face9, face12);
      assertSame(face9, face10);
      assertSame(face9, face2);
      assertSame(face9, face11);
      assertNotSame(face9, face7);
      assertNotSame(face9, face6);
      assertSame(face9, face1);
      assertSame(face9, face4);
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbVICT());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face13.getNbLUN());
      assertNull(face13.getNbSOL());
      assertNull(face13.getNbOR());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Type.NORMAL, face13.getType());
      assertEquals(Ressource.OR, face13.getRes());
      assertNull(face13.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbVICT());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face7);
      assertSame(face11, face0);
      assertSame(face11, face12);
      assertSame(face11, face4);
      assertSame(face11, face3);
      assertNotSame(face11, face6);
      assertSame(face11, face9);
      assertSame(face11, face1);
      assertNotSame(face11, face8);
      assertNotSame(face11, face7);
      assertSame(face11, face13);
      assertSame(face11, face5);
      assertSame(face11, face10);
      assertSame(face11, face2);
      assertNull(face11.getNbSOL());
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbOR());
      
      Face face14 = de0.getFace();
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face7);
      assertNotNull(face14);
      assertNotSame(face14, face6);
      assertSame(face14, face9);
      assertSame(face14, face1);
      assertNotSame(face14, face8);
      assertSame(face14, face13);
      assertNotSame(face14, face7);
      assertSame(face14, face5);
      assertSame(face14, face10);
      assertSame(face14, face2);
      assertSame(face14, face0);
      assertSame(face14, face12);
      assertSame(face14, face4);
      assertSame(face14, face3);
      assertSame(face14, face11);
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      assertEquals(Type.NORMAL, face14.getType());
      assertNull(face14.getNbVICT());
      assertNull(face14.getNbLUN());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbOR());
      
      Face face15 = de0.getFace();
      assertNotEquals(face15, face7);
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face6);
      assertNotNull(face15);
      assertSame(face15, face1);
      assertNotSame(face15, face7);
      assertSame(face15, face5);
      assertNotSame(face15, face8);
      assertSame(face15, face12);
      assertSame(face15, face2);
      assertSame(face15, face9);
      assertSame(face15, face13);
      assertSame(face15, face11);
      assertSame(face15, face3);
      assertSame(face15, face10);
      assertSame(face15, face14);
      assertSame(face15, face0);
      assertNotSame(face15, face6);
      assertSame(face15, face4);
      assertNull(face15.getNbOR());
      assertNull(face15.getNbLUN());
      assertNull(face15.getNbSOL());
      assertEquals(Ressource.OR, face15.getRes());
      assertEquals(Type.NORMAL, face15.getType());
      assertEquals(1, (int)face15.getValeur());
      assertNull(face15.getNbVICT());
      
      de0.setFACE(face10);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face8);
      assertSame(face10, face9);
      assertSame(face10, face5);
      assertSame(face10, face14);
      assertSame(face10, face11);
      assertNotSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face6);
      assertSame(face10, face15);
      assertSame(face10, face4);
      assertSame(face10, face0);
      assertSame(face10, face12);
      assertSame(face10, face2);
      assertSame(face10, face13);
      assertSame(face10, face3);
      assertNotSame(face10, face8);
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbVICT());
      
      Face face16 = de0.faceMin();
      assertNotEquals(face16, face6);
      assertNotEquals(face16, face8);
      assertNotEquals(face16, face7);
      assertNotNull(face16);
      assertSame(face16, face0);
      assertSame(face16, face10);
      assertSame(face16, face12);
      assertSame(face16, face3);
      assertSame(face16, face4);
      assertNotSame(face16, face7);
      assertSame(face16, face13);
      assertSame(face16, face2);
      assertSame(face16, face5);
      assertSame(face16, face9);
      assertSame(face16, face1);
      assertSame(face16, face15);
      assertNotSame(face16, face6);
      assertNotSame(face16, face8);
      assertSame(face16, face14);
      assertSame(face16, face11);
      assertNull(face16.getNbSOL());
      assertEquals(Type.NORMAL, face16.getType());
      assertEquals(1, (int)face16.getValeur());
      assertNull(face16.getNbLUN());
      assertNull(face16.getNbVICT());
      assertEquals(Ressource.OR, face16.getRes());
      assertNull(face16.getNbOR());
      
      de0.setFACE(face6);
      assertNotEquals(face6, face13);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face9);
      assertNotEquals(face6, face8);
      assertNotEquals(face6, face12);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face14);
      assertNotEquals(face6, face11);
      assertNotEquals(face6, face10);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face16);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face15);
      assertNotEquals(face6, face1);
      assertNotSame(face6, face13);
      assertNotSame(face6, face5);
      assertNotSame(face6, face2);
      assertNotSame(face6, face9);
      assertNotSame(face6, face8);
      assertSame(face6, face7);
      assertNotSame(face6, face12);
      assertNotSame(face6, face3);
      assertNotSame(face6, face14);
      assertNotSame(face6, face11);
      assertNotSame(face6, face10);
      assertNotSame(face6, face0);
      assertNotSame(face6, face16);
      assertNotSame(face6, face4);
      assertNotSame(face6, face15);
      assertNotSame(face6, face1);
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbLUN());
      
      Face face17 = de0.faceMin();
      assertNotEquals(face17, face13);
      assertNotEquals(face17, face12);
      assertNotEquals(face17, face15);
      assertNotEquals(face17, face1);
      assertNotEquals(face17, face3);
      assertNotEquals(face17, face8);
      assertNotEquals(face17, face4);
      assertNotEquals(face17, face11);
      assertNotEquals(face17, face0);
      assertNotEquals(face17, face14);
      assertNotEquals(face17, face16);
      assertNotEquals(face17, face10);
      assertNotEquals(face17, face5);
      assertNotEquals(face17, face9);
      assertNotEquals(face17, face2);
      assertNotNull(face17);
      assertNotSame(face17, face13);
      assertNotSame(face17, face12);
      assertNotSame(face17, face15);
      assertNotSame(face17, face1);
      assertNotSame(face17, face3);
      assertNotSame(face17, face8);
      assertNotSame(face17, face4);
      assertNotSame(face17, face11);
      assertNotSame(face17, face0);
      assertNotSame(face17, face14);
      assertNotSame(face17, face16);
      assertSame(face17, face7);
      assertNotSame(face17, face10);
      assertNotSame(face17, face5);
      assertSame(face17, face6);
      assertNotSame(face17, face9);
      assertNotSame(face17, face2);
      assertNull(face17.getNbOR());
      assertNull(face17.getNbVICT());
      assertNull(face17.getNbLUN());
      assertEquals(Type.NORMAL, face17.getType());
      assertEquals(Ressource.OR, face17.getRes());
      assertEquals(1, (int)face17.getValeur());
      assertNull(face17.getNbSOL());
      
      Random.setNextRandom(5);
      String string2 = de0.toString();
      assertEquals(string2, string0);
      assertEquals(string2, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertEquals(string3, string0);
      assertEquals(string3, string1);
      assertEquals(string3, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      de0.setFACE(face9);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face17);
      assertNotEquals(face1, face8);
      assertNotEquals(face3, face6);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face17);
      assertNotEquals(face3, face8);
      assertNotEquals(face9, face17);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face8);
      assertSame(face1, face10);
      assertSame(face1, face4);
      assertSame(face1, face11);
      assertSame(face1, face2);
      assertSame(face1, face0);
      assertNotSame(face1, face7);
      assertNotSame(face1, face17);
      assertSame(face1, face15);
      assertSame(face1, face16);
      assertNotSame(face1, face6);
      assertSame(face1, face5);
      assertSame(face1, face9);
      assertSame(face1, face14);
      assertSame(face1, face13);
      assertNotSame(face1, face8);
      assertSame(face1, face12);
      assertSame(face1, face3);
      assertSame(face3, face5);
      assertSame(face3, face15);
      assertSame(face3, face1);
      assertNotSame(face3, face6);
      assertNotSame(face3, face7);
      assertSame(face3, face2);
      assertSame(face3, face12);
      assertSame(face3, face9);
      assertSame(face3, face13);
      assertNotSame(face3, face8);
      assertSame(face3, face4);
      assertSame(face3, face11);
      assertSame(face3, face0);
      assertSame(face3, face14);
      assertSame(face3, face10);
      assertSame(face3, face16);
      assertNotSame(face3, face17);
      assertSame(face9, face16);
      assertSame(face9, face5);
      assertSame(face9, face14);
      assertSame(face9, face13);
      assertSame(face9, face3);
      assertNotSame(face9, face8);
      assertSame(face9, face0);
      assertSame(face9, face12);
      assertSame(face9, face10);
      assertSame(face9, face2);
      assertSame(face9, face11);
      assertNotSame(face9, face17);
      assertNotSame(face9, face7);
      assertNotSame(face9, face6);
      assertSame(face9, face15);
      assertSame(face9, face1);
      assertSame(face9, face4);
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbVICT());
      
      String string4 = de0.toString();
      assertEquals(string4, string0);
      assertEquals(string4, string2);
      assertEquals(string4, string3);
      assertEquals(string4, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string4);
      assertNotNull(string4);
      
      de0.setFACE(face1);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face17);
      assertNotEquals(face1, face8);
      assertSame(face1, face10);
      assertSame(face1, face4);
      assertSame(face1, face11);
      assertSame(face1, face2);
      assertSame(face1, face0);
      assertNotSame(face1, face7);
      assertNotSame(face1, face17);
      assertSame(face1, face15);
      assertSame(face1, face16);
      assertNotSame(face1, face6);
      assertSame(face1, face5);
      assertSame(face1, face9);
      assertSame(face1, face14);
      assertSame(face1, face13);
      assertNotSame(face1, face8);
      assertSame(face1, face12);
      assertSame(face1, face3);
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
  }

  @Test(timeout = 4000)
  public void test21() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.faceMin();
      assertNull(face0);
      
      Face face1 = de0.getFace();
      assertNull(face1);
      
      de0.FACE3 = null;
      de0.setFACE(null);
      de0.setFACE(null);
      Face face2 = de0.faceMin();
      assertNull(face2);
      
      de0.initDe1();
      Face face3 = de0.faceMin();
      assertNotNull(face3);
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      
      Random.setNextRandom(3);
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(null);
      de0.initDe2();
      Face face4 = de0.getFace();
      assertNotEquals(face4, face3);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbOR());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      
      de0.setFACE(null);
      de0.FACE4 = null;
      Face face5 = de0.faceMin();
      assertNull(face5);
      
      de0.initDe1();
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.initDe2();
      Face face6 = De.compare2Face(de0.FACE3, de0.FACE3);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face4);
      assertNotNull(face6);
      assertNotSame(face6, face3);
      assertNotSame(face6, face4);
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(1, (int)face6.getValeur());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbSOL());
      
      de0.initDe2();
      String string2 = de0.toString();
      assertNotEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      de0.FACE5 = de0.FACE2;
      assertNull(de0.FACE5.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE5.getRes());
      assertEquals(1, (int)de0.FACE5.getValeur());
      assertNull(de0.FACE5.getNbLUN());
      assertNull(de0.FACE5.getNbOR());
      assertNull(de0.FACE5.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE5.getType());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face4);
      assertNotNull(face7);
      assertNotSame(face7, face3);
      assertNotSame(face7, face6);
      assertNotSame(face7, face4);
      assertNull(face7.getNbVICT());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      
      Face face8 = De.compare2Face(de0.FACE3, de0.FACE2);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face3);
      assertNotNull(face8);
      assertNotSame(face8, face7);
      assertNotSame(face8, face4);
      assertNotSame(face8, face6);
      assertNotSame(face8, face3);
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbOR());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbVICT());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbLUN());
      
      de0.initDe1();
      de0.initDe2();
      Face face9 = De.compare2Face(de0.FACE6, face8);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face3);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face4);
      assertNotNull(face9);
      assertNotSame(face8, face7);
      assertNotSame(face8, face4);
      assertNotSame(face8, face6);
      assertNotSame(face8, face3);
      assertSame(face8, face9);
      assertNotSame(face9, face3);
      assertSame(face9, face8);
      assertNotSame(face9, face7);
      assertNotSame(face9, face6);
      assertNotSame(face9, face4);
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbOR());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbVICT());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbLUN());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbVICT());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbSOL());
      
      de0.initDe2();
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(face4);
      assertNotEquals(face4, face7);
      assertNotEquals(face4, face9);
      assertNotEquals(face4, face6);
      assertNotEquals(face4, face8);
      assertNotEquals(face4, face3);
      assertNotSame(face4, face7);
      assertNotSame(face4, face9);
      assertNotSame(face4, face6);
      assertNotSame(face4, face8);
      assertNotSame(face4, face3);
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbOR());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      
      de0.initDe2();
      Face face10 = De.compare2Face(face3, face3);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face4);
      assertNotEquals(face3, face4);
      assertNotEquals(face3, face6);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face7);
      assertNotNull(face10);
      assertNotSame(face10, face9);
      assertSame(face10, face3);
      assertNotSame(face10, face8);
      assertNotSame(face10, face7);
      assertNotSame(face10, face6);
      assertNotSame(face10, face4);
      assertNotSame(face3, face4);
      assertNotSame(face3, face6);
      assertSame(face3, face10);
      assertNotSame(face3, face9);
      assertNotSame(face3, face8);
      assertNotSame(face3, face7);
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test22() {
      Random.setNextRandom((-726));
      Random.setNextRandom(3);
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.getFace();
      assertNull(face0);
      
      de0.initDe2();
      Face face1 = de0.FACE3;
      assertNotNull(face1);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face2 = de0.FACE2;
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      
      de0.FACE3 = face2;
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE3.getType());
      assertEquals(1, (int)de0.FACE3.getValeur());
      assertEquals(Ressource.OR, de0.FACE3.getRes());
      assertNull(de0.FACE3.getNbSOL());
      assertNull(de0.FACE3.getNbLUN());
      assertNull(de0.FACE3.getNbOR());
      assertNull(de0.FACE3.getNbVICT());
      
      de0.FACE6 = face2;
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertEquals(Ressource.OR, de0.FACE6.getRes());
      assertNull(de0.FACE6.getNbOR());
      assertEquals(1, (int)de0.FACE6.getValeur());
      assertNull(de0.FACE6.getNbSOL());
      assertNull(de0.FACE6.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE6.getType());
      assertNull(de0.FACE6.getNbVICT());
      
      Face face3 = De.compare2Face(face1, face2);
      assertNotEquals(face1, face2);
      assertNotEquals(face2, face1);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertSame(face1, face3);
      assertNotSame(face1, face2);
      assertNotSame(face2, face3);
      assertNotSame(face2, face1);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      
      Face face4 = de0.faceMin();
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      
      de0.FACE4 = face4;
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(de0.FACE4.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbSOL());
      assertNull(de0.FACE4.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertSame(face1, face3);
      assertNotSame(face1, face4);
      assertNotSame(face1, face2);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face5 = de0.getFace();
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotNull(face5);
      assertNotSame(face5, face2);
      assertSame(face5, face1);
      assertSame(face5, face3);
      assertNotSame(face5, face4);
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      
      de0.setFACE(face5);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotSame(face5, face2);
      assertSame(face5, face1);
      assertSame(face5, face3);
      assertNotSame(face5, face4);
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      
      Face face6 = de0.faceMin();
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face2);
      assertNotNull(face6);
      assertNotSame(face6, face4);
      assertNotSame(face6, face2);
      assertSame(face6, face1);
      assertSame(face6, face5);
      assertSame(face6, face3);
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbLUN());
      assertEquals(1, (int)face6.getValeur());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face2);
      assertNotNull(face7);
      assertSame(face7, face3);
      assertSame(face7, face5);
      assertNotSame(face7, face4);
      assertSame(face7, face6);
      assertNotSame(face7, face2);
      assertSame(face7, face1);
      assertNull(face7.getNbSOL());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      
      Face face8 = De.compare2Face(de0.FACE4, de0.FACE4);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face4);
      assertNotEquals(face4, face7);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face5);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face6);
      assertNotEquals(de0.FACE4, face2);
      assertNotEquals(de0.FACE4, face4);
      assertNotNull(face8);
      assertNotSame(face8, face2);
      assertSame(face8, face1);
      assertSame(face8, face3);
      assertSame(face8, face5);
      assertNotSame(face8, face4);
      assertSame(face8, face6);
      assertSame(face8, face7);
      assertNotSame(face4, face7);
      assertNotSame(face4, face3);
      assertNotSame(face4, face5);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face8);
      assertNotSame(face4, face6);
      assertNotSame(de0.FACE4, face2);
      assertSame(de0.FACE4, face7);
      assertNotSame(de0.FACE4, face4);
      assertSame(de0.FACE4, face5);
      assertSame(de0.FACE4, face6);
      assertSame(de0.FACE4, face8);
      assertSame(de0.FACE4, face3);
      assertSame(de0.FACE4, face1);
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbOR());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbSOL());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbLUN());
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(de0.FACE4.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbSOL());
      assertNull(de0.FACE4.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      
      Face face9 = de0.getFace();
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face4);
      assertNotNull(face9);
      assertSame(face9, face5);
      assertSame(face9, face3);
      assertSame(face9, face1);
      assertSame(face9, face8);
      assertSame(face9, face6);
      assertSame(face9, face7);
      assertNotSame(face9, face2);
      assertNotSame(face9, face4);
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbSOL());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(Type.NORMAL, face9.getType());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertSame(face1, face9);
      assertSame(face1, face5);
      assertSame(face1, face3);
      assertSame(face1, face7);
      assertSame(face1, face6);
      assertSame(face1, face8);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face10 = de0.getFace();
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face2);
      assertNotNull(face10);
      assertSame(face10, face7);
      assertSame(face10, face5);
      assertSame(face10, face1);
      assertNotSame(face10, face4);
      assertSame(face10, face3);
      assertSame(face10, face9);
      assertSame(face10, face6);
      assertNotSame(face10, face2);
      assertSame(face10, face8);
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbVICT());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      
      Face face11 = de0.faceMin();
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face4);
      assertNotNull(face11);
      assertSame(face11, face8);
      assertNotSame(face11, face2);
      assertSame(face11, face7);
      assertNotSame(face11, face4);
      assertSame(face11, face5);
      assertSame(face11, face1);
      assertSame(face11, face6);
      assertSame(face11, face10);
      assertSame(face11, face3);
      assertSame(face11, face9);
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(1, (int)face11.getValeur());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbSOL());
      
      Face face12 = de0.getFace();
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face2);
      assertNotNull(face12);
      assertSame(face12, face11);
      assertSame(face12, face9);
      assertSame(face12, face3);
      assertSame(face12, face6);
      assertSame(face12, face5);
      assertSame(face12, face7);
      assertSame(face12, face1);
      assertSame(face12, face10);
      assertNotSame(face12, face4);
      assertSame(face12, face8);
      assertNotSame(face12, face2);
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(Ressource.OR, face12.getRes());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbVICT());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbSOL());
      
      Random.setNextRandom((-726));
      de0.FACE2 = face3;
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbVICT());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbSOL());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      
      Random.setNextRandom((-2697));
      Random.setNextRandom(6);
      Face face13 = De.compare2Face(face3, face10);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face2);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertNotEquals(face2, face11);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face12);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face8);
      assertNotEquals(face3, face4);
      assertNotEquals(face3, face2);
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face2);
      assertNotNull(face13);
      assertSame(face10, face7);
      assertSame(face10, face1);
      assertNotSame(face10, face4);
      assertSame(face10, face5);
      assertSame(face10, face3);
      assertSame(face10, face9);
      assertSame(face10, face6);
      assertSame(face10, face13);
      assertSame(face10, face11);
      assertNotSame(face10, face2);
      assertSame(face10, face8);
      assertSame(face10, face12);
      assertSame(face1, face11);
      assertSame(face1, face9);
      assertSame(face1, face10);
      assertSame(face1, face12);
      assertSame(face1, face5);
      assertSame(face1, face7);
      assertSame(face1, face3);
      assertSame(face1, face6);
      assertSame(face1, face13);
      assertSame(face1, face8);
      assertNotSame(face1, face4);
      assertNotSame(face1, face2);
      assertNotSame(face2, face11);
      assertNotSame(face2, face4);
      assertNotSame(face2, face10);
      assertNotSame(face2, face13);
      assertNotSame(face2, face12);
      assertNotSame(face2, face3);
      assertNotSame(face2, face9);
      assertNotSame(face2, face7);
      assertNotSame(face2, face5);
      assertNotSame(face2, face1);
      assertNotSame(face2, face6);
      assertNotSame(face2, face8);
      assertSame(face3, face11);
      assertSame(face3, face10);
      assertSame(face3, face1);
      assertSame(face3, face9);
      assertSame(face3, face6);
      assertSame(face3, face12);
      assertSame(face3, face5);
      assertSame(face3, face7);
      assertSame(face3, face13);
      assertNotSame(face3, face4);
      assertSame(face3, face8);
      assertNotSame(face3, face2);
      assertSame(face13, face8);
      assertSame(face13, face12);
      assertSame(face13, face11);
      assertSame(face13, face10);
      assertSame(face13, face1);
      assertNotSame(face13, face4);
      assertSame(face13, face9);
      assertNotSame(face13, face2);
      assertSame(face13, face3);
      assertSame(face13, face5);
      assertSame(face13, face7);
      assertSame(face13, face6);
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbVICT());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face13.getNbSOL());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Type.NORMAL, face13.getType());
      assertEquals(Ressource.OR, face13.getRes());
      assertNull(face13.getNbOR());
      assertNull(face13.getNbVICT());
      assertNull(face13.getNbLUN());
      
      de0.setFACE(face12);
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face2);
      assertSame(face12, face11);
      assertSame(face12, face9);
      assertSame(face12, face13);
      assertSame(face12, face3);
      assertSame(face12, face6);
      assertSame(face12, face5);
      assertSame(face12, face7);
      assertSame(face12, face1);
      assertSame(face12, face10);
      assertNotSame(face12, face4);
      assertSame(face12, face8);
      assertNotSame(face12, face2);
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(Ressource.OR, face12.getRes());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbVICT());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbSOL());
      
      Face face14 = de0.faceMin();
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face2);
      assertNotNull(face14);
      assertSame(face14, face3);
      assertSame(face14, face6);
      assertSame(face14, face5);
      assertSame(face14, face11);
      assertSame(face14, face8);
      assertNotSame(face14, face2);
      assertSame(face14, face1);
      assertSame(face14, face10);
      assertNotSame(face14, face4);
      assertSame(face14, face7);
      assertSame(face14, face12);
      assertSame(face14, face9);
      assertSame(face14, face13);
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbVICT());
      assertEquals(1, (int)face14.getValeur());
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      assertEquals(Type.NORMAL, face14.getType());
      
      Face face15 = de0.getFace();
      assertNotEquals(face15, face2);
      assertNotEquals(face15, face4);
      assertNotNull(face15);
      assertSame(face15, face8);
      assertSame(face15, face14);
      assertSame(face15, face3);
      assertSame(face15, face10);
      assertSame(face15, face5);
      assertNotSame(face15, face2);
      assertSame(face15, face13);
      assertSame(face15, face11);
      assertSame(face15, face12);
      assertSame(face15, face1);
      assertSame(face15, face9);
      assertSame(face15, face6);
      assertSame(face15, face7);
      assertNotSame(face15, face4);
      assertEquals(Ressource.OR, face15.getRes());
      assertEquals(1, (int)face15.getValeur());
      assertEquals(Type.NORMAL, face15.getType());
      assertNull(face15.getNbSOL());
      assertNull(face15.getNbOR());
      assertNull(face15.getNbLUN());
      assertNull(face15.getNbVICT());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face14);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face11);
      assertNotEquals(face2, face13);
      assertNotEquals(face2, face12);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face15);
      assertNotSame(face2, face14);
      assertNotSame(face2, face4);
      assertNotSame(face2, face10);
      assertNotSame(face2, face3);
      assertNotSame(face2, face9);
      assertNotSame(face2, face5);
      assertNotSame(face2, face8);
      assertNotSame(face2, face11);
      assertNotSame(face2, face13);
      assertNotSame(face2, face12);
      assertNotSame(face2, face7);
      assertNotSame(face2, face1);
      assertNotSame(face2, face6);
      assertNotSame(face2, face15);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      
      Face face16 = de0.getFace();
      assertNotEquals(face16, face15);
      assertNotEquals(face16, face8);
      assertNotEquals(face16, face4);
      assertNotEquals(face16, face3);
      assertNotEquals(face16, face14);
      assertNotEquals(face16, face12);
      assertNotEquals(face16, face5);
      assertNotEquals(face16, face10);
      assertNotEquals(face16, face1);
      assertNotEquals(face16, face7);
      assertNotEquals(face16, face11);
      assertNotEquals(face16, face13);
      assertNotEquals(face16, face6);
      assertNotEquals(face16, face9);
      assertNotNull(face16);
      assertNotSame(face16, face15);
      assertSame(face16, face2);
      assertNotSame(face16, face8);
      assertNotSame(face16, face4);
      assertNotSame(face16, face3);
      assertNotSame(face16, face14);
      assertNotSame(face16, face12);
      assertNotSame(face16, face5);
      assertNotSame(face16, face10);
      assertNotSame(face16, face1);
      assertNotSame(face16, face7);
      assertNotSame(face16, face11);
      assertNotSame(face16, face13);
      assertNotSame(face16, face6);
      assertNotSame(face16, face9);
      assertNull(face16.getNbSOL());
      assertEquals(1, (int)face16.getValeur());
      assertNull(face16.getNbLUN());
      assertNull(face16.getNbVICT());
      assertNull(face16.getNbOR());
      assertEquals(Type.NORMAL, face16.getType());
      assertEquals(Ressource.OR, face16.getRes());
  }

  @Test(timeout = 4000)
  public void test23() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE6;
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      
      de0.FACE3 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      assertNull(de0.FACE3.getNbVICT());
      assertNull(de0.FACE3.getNbLUN());
      assertNull(de0.FACE3.getNbOR());
      assertEquals(2, (int)de0.FACE3.getValeur());
      assertEquals(Ressource.VICTOIRE, de0.FACE3.getRes());
      assertNull(de0.FACE3.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE3.getType());
      
      Face face1 = de0.getFace();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.OR, face1.getRes());
      
      Face face2 = De.compare2Face(de0.FACE4, de0.FACE4);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNull(face2.getNbSOL());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertNotSame(face3, face0);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      
      Face face4 = de0.FACE3;
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face1);
      assertNotNull(face4);
      assertNotSame(face4, face2);
      assertNotSame(face4, face3);
      assertSame(face4, face0);
      assertNotSame(face4, face1);
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertNull(face4.getNbVICT());
      assertEquals(2, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face4);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face1);
      assertNotSame(face4, face2);
      assertNotSame(face4, face3);
      assertSame(face4, face0);
      assertNotSame(face4, face1);
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertNull(face4.getNbVICT());
      assertEquals(2, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      
      Face face5 = de0.getFace();
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face3);
      assertNotNull(face5);
      assertSame(face5, face0);
      assertNotSame(face5, face1);
      assertNotSame(face5, face2);
      assertSame(face5, face4);
      assertNotSame(face5, face3);
      assertEquals(2, (int)face5.getValeur());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face5.getRes());
      assertNull(face5.getNbVICT());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.initDe1();
      Face face6 = de0.getFace();
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face4);
      assertNotNull(face6);
      assertNotSame(face6, face0);
      assertNotSame(face6, face3);
      assertNotSame(face6, face2);
      assertNotSame(face6, face5);
      assertNotSame(face6, face1);
      assertNotSame(face6, face4);
      assertEquals(1, (int)face6.getValeur());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      
      de0.initDe1();
      de0.setFACE(face1);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face6);
      assertNotSame(face1, face4);
      assertNotSame(face1, face5);
      assertNotSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face6);
      assertSame(face1, face3);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.OR, face1.getRes());
      
      Face face7 = De.compare2Face(de0.FACE4, de0.FACE6);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face2);
      assertNotNull(face7);
      assertNotSame(face7, face4);
      assertNotSame(face7, face6);
      assertNotSame(face7, face1);
      assertNotSame(face7, face3);
      assertNotSame(face7, face0);
      assertNotSame(face7, face5);
      assertNotSame(face7, face2);
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbSOL());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      
      de0.initDe1();
      de0.setFACE(face4);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face6);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face7);
      assertNotEquals(face4, face1);
      assertNotSame(face4, face2);
      assertNotSame(face4, face6);
      assertNotSame(face4, face3);
      assertNotSame(face4, face7);
      assertSame(face4, face5);
      assertNotSame(face4, face1);
      assertSame(face4, face0);
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertNull(face4.getNbVICT());
      assertEquals(2, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      
      String string2 = de0.toString();
      assertNotEquals(string2, string0);
      assertNotEquals(string2, string1);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertNotEquals(string3, string0);
      assertNotEquals(string3, string1);
      assertEquals(string3, string2);
      assertEquals("\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      de0.initDe2();
      Face face8 = de0.faceMin();
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face7);
      assertNotNull(face8);
      assertNotSame(face8, face2);
      assertNotSame(face8, face5);
      assertNotSame(face8, face1);
      assertNotSame(face8, face6);
      assertNotSame(face8, face4);
      assertNotSame(face8, face3);
      assertNotSame(face8, face0);
      assertNotSame(face8, face7);
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertNull(face8.getNbSOL());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbVICT());
      
      Face face9 = de0.getFace();
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face7);
      assertNotNull(face9);
      assertNotSame(face9, face3);
      assertSame(face9, face8);
      assertNotSame(face9, face5);
      assertNotSame(face9, face2);
      assertNotSame(face9, face1);
      assertNotSame(face9, face0);
      assertNotSame(face9, face6);
      assertNotSame(face9, face4);
      assertNotSame(face9, face7);
      assertNull(face9.getNbSOL());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbLUN());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbVICT());
      assertEquals(Type.NORMAL, face9.getType());
      
      de0.initDe2();
      Face face10 = de0.getFace();
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face7);
      assertNotNull(face10);
      assertNotSame(face10, face6);
      assertNotSame(face10, face1);
      assertNotSame(face10, face9);
      assertNotSame(face10, face8);
      assertNotSame(face10, face4);
      assertNotSame(face10, face5);
      assertNotSame(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face3);
      assertNotSame(face10, face7);
      assertNull(face10.getNbSOL());
      assertNull(face10.getNbOR());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbVICT());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face4);
      assertNotNull(face11);
      assertNotSame(face11, face5);
      assertNotSame(face11, face2);
      assertNotSame(face11, face7);
      assertNotSame(face11, face1);
      assertNotSame(face11, face0);
      assertSame(face11, face10);
      assertNotSame(face11, face6);
      assertNotSame(face11, face9);
      assertNotSame(face11, face8);
      assertNotSame(face11, face3);
      assertNotSame(face11, face4);
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(1, (int)face11.getValeur());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbSOL());
  }

  @Test(timeout = 4000)
  public void test24() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.getFace();
      assertNull(face0);
      
      de0.setFACE(null);
      de0.FACE5 = null;
      de0.initDe1();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face1 = de0.getFace();
      assertNotNull(face1);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      
      de0.initDe2();
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face1);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      
      Face face2 = De.compare2Face(de0.FACE2, de0.FACE5);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face1);
      assertNotSame(face2, face1);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertSame(face3, face2);
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test25() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face0 = De.compare2Face(de0.FACE6, de0.FACE3);
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      
      de0.setFACE(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      
      de0.FACE5 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(de0.FACE5.getNbLUN());
      assertNull(de0.FACE5.getNbSOL());
      assertNull(de0.FACE5.getNbOR());
      assertEquals(Ressource.OR, de0.FACE5.getRes());
      assertEquals(1, (int)de0.FACE5.getValeur());
      assertEquals(Type.NORMAL, de0.FACE5.getType());
      assertNull(de0.FACE5.getNbVICT());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face1 = De.compare2Face(de0.FACE2, face0);
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face0, face1);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertSame(face2, face0);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertSame(face3, face2);
      assertNotSame(face3, face1);
      assertSame(face3, face0);
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      
      de0.setFACE(face1);
      assertNotEquals(face0, face1);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face0);
      assertSame(face0, face3);
      assertNotSame(face0, face1);
      assertSame(face0, face2);
      assertNotSame(face1, face3);
      assertNotSame(face1, face2);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face4 = de0.faceMin();
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face4, face0);
      assertSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      
      de0.initDe1();
      Face face5 = De.compare2Face(de0.FACE6, de0.FACE1);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotNull(face5);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertNotSame(face5, face0);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      
      Face face6 = de0.getFace();
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face2);
      assertNotNull(face6);
      assertNotSame(face6, face0);
      assertNotSame(face6, face4);
      assertNotSame(face6, face3);
      assertNotSame(face6, face1);
      assertNotSame(face6, face2);
      assertSame(face6, face5);
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbLUN());
      assertEquals(Type.NORMAL, face6.getType());
      
      de0.initDe2();
      de0.initDe1();
      Face face7 = de0.getFace();
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face5);
      assertNotNull(face7);
      assertNotSame(face7, face0);
      assertNotSame(face7, face4);
      assertNotSame(face7, face6);
      assertNotSame(face7, face1);
      assertNotSame(face7, face3);
      assertNotSame(face7, face2);
      assertNotSame(face7, face5);
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      assertEquals(1, (int)face7.getValeur());
      
      Face face8 = De.compare2Face(face7, face1);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face5);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face4);
      assertNotEquals(face0, face6);
      assertNotEquals(face0, face7);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face4);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face6);
      assertNotNull(face8);
      assertNotSame(face7, face0);
      assertSame(face7, face8);
      assertNotSame(face7, face4);
      assertNotSame(face7, face6);
      assertNotSame(face7, face1);
      assertNotSame(face7, face3);
      assertNotSame(face7, face2);
      assertNotSame(face7, face5);
      assertNotSame(face8, face3);
      assertNotSame(face8, face5);
      assertNotSame(face8, face2);
      assertNotSame(face8, face1);
      assertNotSame(face8, face0);
      assertNotSame(face8, face6);
      assertSame(face8, face7);
      assertNotSame(face8, face4);
      assertSame(face0, face3);
      assertNotSame(face0, face6);
      assertNotSame(face0, face7);
      assertNotSame(face0, face8);
      assertNotSame(face0, face5);
      assertNotSame(face0, face1);
      assertNotSame(face0, face4);
      assertSame(face0, face2);
      assertNotSame(face1, face8);
      assertNotSame(face1, face7);
      assertNotSame(face1, face3);
      assertNotSame(face1, face5);
      assertNotSame(face1, face2);
      assertSame(face1, face4);
      assertNotSame(face1, face0);
      assertNotSame(face1, face6);
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face9 = de0.FACE2;
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face8);
      assertNotNull(face9);
      assertNotSame(face9, face0);
      assertNotSame(face9, face4);
      assertNotSame(face9, face2);
      assertNotSame(face9, face6);
      assertNotSame(face9, face3);
      assertNotSame(face9, face1);
      assertNotSame(face9, face5);
      assertNotSame(face9, face7);
      assertNotSame(face9, face8);
      assertNull(face9.getNbSOL());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      
      de0.setFACE(face9);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face8);
      assertNotSame(face9, face0);
      assertNotSame(face9, face4);
      assertNotSame(face9, face2);
      assertNotSame(face9, face6);
      assertNotSame(face9, face3);
      assertNotSame(face9, face1);
      assertNotSame(face9, face5);
      assertNotSame(face9, face7);
      assertNotSame(face9, face8);
      assertNull(face9.getNbSOL());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      
      Face face10 = de0.getFace();
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face1);
      assertNotNull(face10);
      assertNotSame(face10, face4);
      assertNotSame(face10, face6);
      assertSame(face10, face9);
      assertNotSame(face10, face5);
      assertNotSame(face10, face3);
      assertNotSame(face10, face7);
      assertNotSame(face10, face8);
      assertNotSame(face10, face0);
      assertNotSame(face10, face2);
      assertNotSame(face10, face1);
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbLUN());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test26() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      
      de0.setFACE(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      
      Face face1 = De.compare2Face(de0.FACE3, de0.FACE3);
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertSame(face2, face0);
      assertNotSame(face2, face1);
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face0);
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      
      Face face3 = de0.getFace();
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertNotSame(face3, face0);
      assertNotSame(face3, face2);
      assertSame(face3, face1);
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face4 = De.compare2Face(de0.FACE1, face1);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face0);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertSame(face1, face4);
      assertSame(face1, face3);
      assertNotSame(face1, face2);
      assertNotSame(face1, face0);
      assertSame(face4, face1);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertSame(face4, face3);
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbVICT());
      
      Face face5 = de0.getFace();
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face2);
      assertNotNull(face5);
      assertNotSame(face5, face0);
      assertNotSame(face5, face2);
      assertSame(face5, face3);
      assertSame(face5, face4);
      assertSame(face5, face1);
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbLUN());
      assertEquals(1, (int)face5.getValeur());
      
      String string2 = de0.toString();
      assertEquals(string2, string0);
      assertEquals(string2, string1);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face6 = de0.getFace();
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face2);
      assertNotNull(face6);
      assertNotSame(face6, face0);
      assertNotSame(face6, face2);
      assertSame(face6, face1);
      assertSame(face6, face3);
      assertSame(face6, face4);
      assertSame(face6, face5);
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbLUN());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(Type.NORMAL, face6.getType());
      
      Face face7 = de0.faceMin();
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face2);
      assertNotNull(face7);
      assertSame(face7, face1);
      assertSame(face7, face3);
      assertSame(face7, face4);
      assertNotSame(face7, face0);
      assertSame(face7, face5);
      assertSame(face7, face6);
      assertNotSame(face7, face2);
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbOR());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(Ressource.OR, face7.getRes());
      
      Face face8 = de0.getFace();
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face0);
      assertNotNull(face8);
      assertNotSame(face8, face2);
      assertNotSame(face8, face0);
      assertSame(face8, face5);
      assertSame(face8, face6);
      assertSame(face8, face4);
      assertSame(face8, face3);
      assertSame(face8, face7);
      assertSame(face8, face1);
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbLUN());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbOR());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      
      Face face9 = De.compare2Face(de0.FACE1, face1);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face0);
      assertNotNull(face9);
      assertSame(face9, face4);
      assertSame(face9, face3);
      assertSame(face9, face5);
      assertSame(face9, face6);
      assertNotSame(face9, face2);
      assertNotSame(face9, face0);
      assertSame(face9, face7);
      assertSame(face9, face8);
      assertSame(face9, face1);
      assertSame(face1, face8);
      assertSame(face1, face4);
      assertSame(face1, face9);
      assertSame(face1, face3);
      assertSame(face1, face7);
      assertSame(face1, face5);
      assertSame(face1, face6);
      assertNotSame(face1, face2);
      assertNotSame(face1, face0);
      assertNull(face9.getNbSOL());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertEquals(Ressource.OR, face1.getRes());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face7);
      assertNotSame(face2, face5);
      assertSame(face2, face0);
      assertNotSame(face2, face4);
      assertNotSame(face2, face9);
      assertNotSame(face2, face3);
      assertNotSame(face2, face6);
      assertNotSame(face2, face8);
      assertNotSame(face2, face1);
      assertNotSame(face2, face7);
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test27() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.FACE1;
      assertNull(face0);
      
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe2();
      Face face1 = de0.getFace();
      assertNotNull(face1);
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      
      de0.initDe1();
      de0.setFACE(face1);
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      
      Face face2 = De.compare2Face(de0.FACE2, de0.FACE6);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      
      Face face3 = de0.getFace();
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      
      de0.initDe2();
      Face face4 = de0.FACE5;
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face4.getRes());
      
      de0.setFACE(face4);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face4.getRes());
  }

  @Test(timeout = 4000)
  public void test28() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.FACE3 = null;
      de0.initDe2();
      de0.initDe2();
      de0.FACE6 = null;
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face0 = de0.FACE5;
      assertNotNull(face0);
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.LUNAIRE, face0.getRes());
      
      de0.FACE1 = face0;
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.LUNAIRE, face0.getRes());
      assertNull(de0.FACE1.getNbLUN());
      assertEquals(Ressource.LUNAIRE, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbOR());
      assertNull(de0.FACE1.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertNull(de0.FACE1.getNbSOL());
      assertEquals(1, (int)de0.FACE1.getValeur());
      
      Face face1 = De.compare2Face(face0, de0.FACE5);
      assertNotNull(face1);
      assertSame(face0, face1);
      assertSame(face1, face0);
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.LUNAIRE, face0.getRes());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      
      de0.setFACE(face1);
      assertSame(face0, face1);
      assertSame(face1, face0);
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.LUNAIRE, face0.getRes());
      assertNull(face1.getNbVICT());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face2 = de0.FACE4;
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbLUN());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      
      Face face3 = De.compare2Face(de0.FACE6, face2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertNotSame(face2, face1);
      assertNotSame(face3, face0);
      assertNotSame(face3, face1);
      assertSame(face3, face2);
      assertNull(face2.getNbLUN());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertEquals(1, (int)face2.getValeur());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbVICT());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      
      Face face4 = de0.getFace();
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face3);
      assertNotNull(face4);
      assertSame(face4, face1);
      assertNotSame(face4, face2);
      assertNotSame(face4, face3);
      assertSame(face4, face0);
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face5 = de0.getFace();
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face3);
      assertNotNull(face5);
      assertSame(face5, face1);
      assertNotSame(face5, face2);
      assertNotSame(face5, face3);
      assertSame(face5, face4);
      assertSame(face5, face0);
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(Ressource.LUNAIRE, face5.getRes());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertEquals(1, (int)face5.getValeur());
      
      de0.initDe2();
      Face face6 = de0.getFace();
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face3);
      assertNotNull(face6);
      assertNotSame(face6, face5);
      assertNotSame(face6, face2);
      assertNotSame(face6, face4);
      assertNotSame(face6, face0);
      assertNotSame(face6, face1);
      assertNotSame(face6, face3);
      assertNull(face6.getNbSOL());
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbOR());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbLUN());
  }

  @Test(timeout = 4000)
  public void test29() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.getFace();
      assertNotNull(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      
      de0.FACE1 = face0;
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertNull(de0.FACE1.getNbVICT());
      assertNull(de0.FACE1.getNbLUN());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbOR());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face1 = de0.FACE4;
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbLUN());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face3 = De.compare2Face(de0.FACE1, de0.FACE5);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face1);
      assertNotSame(face2, face3);
      assertSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbLUN());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      
      Face face4 = de0.FACE3;
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      
      de0.setFACE(face4);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotSame(face4, face3);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Type.NORMAL, face4.getType());
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face5 = de0.faceMin();
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face0);
      assertNotNull(face5);
      assertSame(face5, face4);
      assertNotSame(face5, face3);
      assertNotSame(face5, face2);
      assertNotSame(face5, face1);
      assertNotSame(face5, face0);
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbVICT());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbLUN());
      
      Face face6 = de0.faceMin();
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face3);
      assertNotNull(face6);
      assertSame(face6, face5);
      assertNotSame(face6, face1);
      assertNotSame(face6, face0);
      assertNotSame(face6, face2);
      assertNotSame(face6, face3);
      assertSame(face6, face4);
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbVICT());
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbSOL());
      assertEquals(1, (int)face6.getValeur());
      
      de0.initDe1();
      de0.initDe2();
  }

  @Test(timeout = 4000)
  public void test30() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.FACE1;
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      
      Face face1 = De.compare2Face(face0, de0.FACE4);
      assertNotNull(face1);
      assertSame(face0, face1);
      assertSame(face1, face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      de0.setFACE(face1);
      assertSame(face0, face1);
      assertSame(face1, face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      de0.initDe2();
      Face face2 = de0.getFace();
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      
      de0.initDe2();
      de0.FACE1 = face2;
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(de0.FACE1.getNbVICT());
      assertNull(de0.FACE1.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertNull(de0.FACE1.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbLUN());
      assertEquals(1, (int)de0.FACE1.getValeur());
      
      Face face3 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotNull(face3);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertNotSame(face3, face1);
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      Face face4 = De.compare2Face(de0.FACE6, de0.FACE3);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertNotSame(face4, face0);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      
      de0.setFACE(face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertSame(face0, face1);
      assertNotSame(face0, face2);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.initDe1();
      Face face5 = de0.getFace();
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face1);
      assertNotNull(face5);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNotSame(face5, face3);
      assertNotSame(face5, face0);
      assertNotSame(face5, face1);
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      
      de0.setFACE(face1);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face5);
      assertSame(face0, face1);
      assertNotSame(face0, face2);
      assertNotSame(face0, face5);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertNotSame(face1, face4);
      assertNotSame(face1, face2);
      assertNotSame(face1, face3);
      assertNotSame(face1, face5);
      assertSame(face1, face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      Face face6 = de0.faceMin();
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face3);
      assertNotNull(face6);
      assertNotSame(face6, face2);
      assertNotSame(face6, face4);
      assertSame(face6, face1);
      assertSame(face6, face0);
      assertNotSame(face6, face5);
      assertNotSame(face6, face3);
      assertNull(face6.getNbOR());
      assertNull(face6.getNbVICT());
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbSOL());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbLUN());
      
      de0.setFACE(face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertSame(face0, face1);
      assertSame(face0, face6);
      assertNotSame(face0, face2);
      assertNotSame(face0, face5);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      
      de0.initDe2();
      de0.FACE2 = face3;
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbSOL());
      assertNull(de0.FACE2.getNbLUN());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbVICT());
      assertEquals(Ressource.LUNAIRE, de0.FACE2.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.LUNAIRE, face3.getRes());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertNotEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      String string3 = de0.toString();
      assertEquals(string3, string1);
      assertEquals(string3, string2);
      assertNotEquals(string3, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face7 = De.compare2Face(de0.FACE2, face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face4);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face4);
      assertNotNull(face7);
      assertSame(face0, face1);
      assertSame(face0, face6);
      assertSame(face0, face7);
      assertNotSame(face0, face2);
      assertNotSame(face0, face5);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertSame(face7, face1);
      assertSame(face7, face6);
      assertNotSame(face7, face3);
      assertSame(face7, face0);
      assertNotSame(face7, face2);
      assertNotSame(face7, face5);
      assertNotSame(face7, face4);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      
      Face face8 = De.compare2Face(face5, de0.FACE1);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face5);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face2);
      assertNotEquals(de0.FACE1, face3);
      assertNotEquals(de0.FACE1, face4);
      assertNotEquals(de0.FACE1, face1);
      assertNotEquals(de0.FACE1, face6);
      assertNotEquals(de0.FACE1, face5);
      assertNotEquals(de0.FACE1, face0);
      assertNotEquals(de0.FACE1, face7);
      assertNotEquals(de0.FACE1, face2);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face7);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face6);
      assertNotNull(face8);
      assertNotSame(face2, face7);
      assertNotSame(face2, face6);
      assertNotSame(face2, face3);
      assertNotSame(face2, face0);
      assertNotSame(face2, face4);
      assertNotSame(face2, face1);
      assertNotSame(face2, face8);
      assertNotSame(face2, face5);
      assertNotSame(face8, face1);
      assertNotSame(face8, face6);
      assertNotSame(face8, face7);
      assertNotSame(face8, face4);
      assertNotSame(face8, face0);
      assertNotSame(face8, face3);
      assertNotSame(face8, face2);
      assertSame(face8, face5);
      assertNotSame(de0.FACE1, face3);
      assertNotSame(de0.FACE1, face4);
      assertNotSame(de0.FACE1, face1);
      assertNotSame(de0.FACE1, face8);
      assertNotSame(de0.FACE1, face6);
      assertNotSame(de0.FACE1, face5);
      assertNotSame(de0.FACE1, face0);
      assertNotSame(de0.FACE1, face7);
      assertNotSame(de0.FACE1, face2);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNotSame(face5, face3);
      assertNotSame(face5, face0);
      assertNotSame(face5, face7);
      assertNotSame(face5, face1);
      assertNotSame(face5, face6);
      assertSame(face5, face8);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertEquals(1, (int)face8.getValeur());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbSOL());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(de0.FACE1.getNbVICT());
      assertNull(de0.FACE1.getNbOR());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertNull(de0.FACE1.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertNull(de0.FACE1.getNbLUN());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      
      String string4 = de0.toString();
      assertEquals(string4, string1);
      assertEquals(string4, string2);
      assertEquals(string4, string3);
      assertNotEquals(string4, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string4);
      assertNotNull(string4);
      
      de0.setFACE(face2);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face5);
      assertNotSame(face2, face7);
      assertNotSame(face2, face6);
      assertNotSame(face2, face3);
      assertNotSame(face2, face0);
      assertNotSame(face2, face4);
      assertNotSame(face2, face1);
      assertNotSame(face2, face8);
      assertNotSame(face2, face5);
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      
      de0.initDe1();
      Face face9 = De.compare2Face(de0.FACE6, face7);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face8);
      assertNotEquals(face0, face4);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face8);
      assertNotEquals(face7, face4);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face4);
      assertNotNull(face9);
      assertSame(face0, face1);
      assertSame(face0, face6);
      assertSame(face0, face7);
      assertNotSame(face0, face2);
      assertNotSame(face0, face5);
      assertNotSame(face0, face3);
      assertNotSame(face0, face4);
      assertNotSame(face0, face8);
      assertSame(face0, face9);
      assertSame(face7, face1);
      assertSame(face7, face6);
      assertSame(face7, face9);
      assertNotSame(face7, face3);
      assertSame(face7, face0);
      assertNotSame(face7, face2);
      assertNotSame(face7, face5);
      assertNotSame(face7, face4);
      assertNotSame(face7, face8);
      assertNotSame(face9, face5);
      assertSame(face9, face1);
      assertSame(face9, face6);
      assertSame(face9, face7);
      assertNotSame(face9, face2);
      assertNotSame(face9, face3);
      assertNotSame(face9, face8);
      assertSame(face9, face0);
      assertNotSame(face9, face4);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      assertNull(face9.getNbLUN());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbVICT());
      
      Face face10 = de0.faceMin();
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face7);
      assertNotNull(face10);
      assertNotSame(face10, face5);
      assertNotSame(face10, face9);
      assertNotSame(face10, face2);
      assertNotSame(face10, face3);
      assertNotSame(face10, face4);
      assertNotSame(face10, face8);
      assertNotSame(face10, face1);
      assertNotSame(face10, face6);
      assertNotSame(face10, face0);
      assertNotSame(face10, face7);
      assertEquals(1, (int)face10.getValeur());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbSOL());
      
      de0.initDe1();
      String string5 = de0.toString();
      assertNotEquals(string5, string4);
      assertNotEquals(string5, string0);
      assertNotEquals(string5, string3);
      assertNotEquals(string5, string1);
      assertNotEquals(string5, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test31() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.getFace();
      assertNull(face0);
      
      de0.initDe2();
      de0.FACE3 = de0.FACE6;
      assertNull(de0.FACE3.getNbVICT());
      assertNull(de0.FACE3.getNbOR());
      assertEquals(2, (int)de0.FACE3.getValeur());
      assertNull(de0.FACE3.getNbLUN());
      assertNull(de0.FACE3.getNbSOL());
      assertEquals(Ressource.VICTOIRE, de0.FACE3.getRes());
      assertEquals(Type.NORMAL, de0.FACE3.getType());
      
      de0.initDe2();
      Face face1 = de0.faceMin();
      assertNotNull(face1);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      
      Face face2 = De.compare2Face(de0.FACE6, face1);
      assertNotNull(face2);
      assertSame(face1, face2);
      assertSame(face2, face1);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbSOL());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      
      Face face3 = de0.faceMin();
      assertNotNull(face3);
      assertSame(face3, face2);
      assertSame(face3, face1);
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
  }

  @Test(timeout = 4000)
  public void test32() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE6;
      assertNotNull(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      
      de0.FACE5 = face0;
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      assertNull(de0.FACE5.getNbLUN());
      assertNull(de0.FACE5.getNbOR());
      assertNull(de0.FACE5.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE5.getType());
      assertEquals(2, (int)de0.FACE5.getValeur());
      assertNull(de0.FACE5.getNbSOL());
      assertEquals(Ressource.VICTOIRE, de0.FACE5.getRes());
      
      de0.setFACE(face0);
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      
      Face face1 = de0.FACE5;
      assertNotNull(face1);
      assertSame(face1, face0);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      
      Face face2 = De.compare2Face(face1, de0.FACE6);
      assertNotNull(face2);
      assertSame(face1, face0);
      assertSame(face1, face2);
      assertSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(2, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.VICTOIRE, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      
      Face face3 = de0.getFace();
      assertNotNull(face3);
      assertSame(face3, face0);
      assertSame(face3, face1);
      assertSame(face3, face2);
      assertEquals(2, (int)face3.getValeur());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face3.getRes());
      
      Face face4 = De.compare2Face(de0.FACE4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face3);
      assertNotNull(face4);
      assertSame(face1, face3);
      assertNotSame(face1, face4);
      assertSame(face1, face0);
      assertSame(face1, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertNotSame(face4, face2);
      assertNotSame(face4, face3);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbVICT());
      
      Face face5 = de0.faceMin();
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face0);
      assertNotNull(face5);
      assertNotSame(face5, face3);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNotSame(face5, face1);
      assertNotSame(face5, face0);
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      
      de0.initDe1();
      de0.FACE2 = face5;
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbVICT());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      
      de0.initDe2();
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face6 = De.compare2Face(face5, face1);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face5);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face0);
      assertNotNull(face6);
      assertSame(face1, face3);
      assertNotSame(face1, face4);
      assertSame(face1, face0);
      assertSame(face1, face2);
      assertNotSame(face1, face5);
      assertNotSame(face1, face6);
      assertSame(face5, face6);
      assertNotSame(face5, face3);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNotSame(face5, face1);
      assertNotSame(face5, face0);
      assertNotSame(face6, face2);
      assertNotSame(face6, face4);
      assertNotSame(face6, face1);
      assertNotSame(face6, face3);
      assertNotSame(face6, face0);
      assertSame(face6, face5);
      assertEquals(2, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertNull(face5.getNbOR());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(Type.NORMAL, face6.getType());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbSOL());
  }

  @Test(timeout = 4000)
  public void test33() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      de0.initDe1();
      Face face0 = De.compare2Face(de0.FACE1, de0.FACE2);
      assertNotNull(face0);
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.initDe2();
      de0.initDe1();
      Face face1 = De.compare2Face(de0.FACE6, de0.FACE4);
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbVICT());
  }

  @Test(timeout = 4000)
  public void test34() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = De.compare2Face(de0.FACE4, de0.FACE5);
      assertNotNull(face0);
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbOR());
      
      de0.initDe1();
  }

  @Test(timeout = 4000)
  public void test35() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.faceMin();
      assertNull(face0);
      
      de0.setFACE(null);
      Face face1 = de0.FACE4;
      assertNull(face1);
      
      de0.setFACE(null);
      de0.initDe1();
      de0.setFACE(null);
      // Undeclared exception!

  }



  @Test(timeout = 4000)
  public void test38() {
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.faceMin();
      assertNull(face0);
      
      de0.initDe2();
      de0.FACE1 = de0.FACE5;
      assertNull(de0.FACE1.getNbVICT());
      assertNull(de0.FACE1.getNbOR());
      assertEquals(Ressource.LUNAIRE, de0.FACE1.getRes());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      
      Face face1 = de0.faceMin();
      assertNotNull(face1);
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Type.NORMAL, face1.getType());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertEquals(Type.NORMAL, face2.getType());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face2);
      assertNotSame(face1, face2);
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Type.NORMAL, face1.getType());
      
      String string0 = de0.toString();
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.FACE4 = face1;
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertNull(de0.FACE4.getNbOR());
      assertNull(de0.FACE4.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbLUN());
      assertNull(de0.FACE4.getNbVICT());
      
      de0.initDe2();
      Face face3 = De.compare2Face(de0.FACE2, de0.FACE6);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbOR());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(1, (int)face3.getValeur());
      
      de0.initDe2();
  }

  @Test(timeout = 4000)
  public void test39() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.getFace();
      assertNotNull(face0);
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      
      de0.setFACE(face0);
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbOR());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face1 = De.compare2Face(de0.FACE6, de0.FACE5);
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      
      Face face2 = De.compare2Face(face1, de0.FACE3);
      assertNotEquals(face1, face0);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
  }

  @Test(timeout = 4000)
  public void test41() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.FACE1;
      assertNotNull(face0);
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      
      de0.FACE4 = face0;
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(de0.FACE4.getNbSOL());
      assertNull(de0.FACE4.getNbOR());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertNull(de0.FACE4.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face1 = de0.faceMin();
      assertNotNull(face1);
      assertSame(face1, face0);
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
  }


  @Test(timeout = 4000)
  public void test43() {
      Random.setNextRandom(863);
      int int0 = (-1217);
      Random.setNextRandom((-1217));
      De de0 = new De();
      assertNotNull(de0);
      
      Face face0 = de0.getFace();
      assertNull(face0);
      
      de0.FACE2 = null;

  }

  @Test(timeout = 4000)
  public void test44() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE5;
      assertNotNull(face0);
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      
      de0.setFACE(face0);
      assertNull(face0.getNbLUN());
      assertEquals(Ressource.LUNAIRE, face0.getRes());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      
      String string0 = de0.toString();
      assertEquals("\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      Face face1 = De.compare2Face(de0.FACE6, de0.FACE5);
      assertNotNull(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
      
      de0.setFACE(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbSOL());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(1, (int)face1.getValeur());
  }

  @Test(timeout = 4000)
  public void test45() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.getFace();
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      
      de0.FACE4 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertNull(de0.FACE4.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertNull(de0.FACE4.getNbOR());
      assertNull(de0.FACE4.getNbVICT());
      assertNull(de0.FACE4.getNbLUN());
      assertEquals(1, (int)de0.FACE4.getValeur());
      
      Random.setNextRandom((-445));
      Face face1 = de0.FACE3;
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbVICT());
      
      Face face2 = de0.getFace();
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbOR());
      
      Face face3 = De.compare2Face(face1, de0.FACE3);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face2);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertNotSame(face1, face0);
      assertSame(face1, face3);
      assertNotSame(face1, face2);
      assertSame(face3, face1);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      
      Face face4 = de0.getFace();
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotNull(face4);
      assertNotSame(face4, face3);
      assertSame(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      
      Face face5 = De.compare2Face(de0.FACE4, de0.FACE5);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face2);
      assertNotNull(face5);
      assertNotSame(face5, face3);
      assertNotSame(face5, face1);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertSame(face5, face0);
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(1, (int)face5.getValeur());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face5.getNbVICT());
      
      Face face6 = de0.faceMin();
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face2);
      assertNotNull(face6);
      assertNotSame(face6, face1);
      assertSame(face6, face0);
      assertSame(face6, face5);
      assertNotSame(face6, face3);
      assertNotSame(face6, face4);
      assertNotSame(face6, face2);
      assertNull(face6.getNbSOL());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbOR());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbLUN());
      assertEquals(1, (int)face6.getValeur());
      
      Random.setNextRandom(2);
      Face face7 = De.compare2Face(de0.FACE5, de0.FACE2);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face6);
      assertNotNull(face7);
      assertNotSame(face7, face0);
      assertNotSame(face7, face2);
      assertNotSame(face7, face1);
      assertNotSame(face7, face4);
      assertNotSame(face7, face5);
      assertNotSame(face7, face3);
      assertNotSame(face7, face6);
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertEquals(Type.NORMAL, face7.getType());
      
      Face face8 = de0.getFace();
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face6);
      assertNotNull(face8);
      assertSame(face8, face1);
      assertNotSame(face8, face0);
      assertNotSame(face8, face5);
      assertNotSame(face8, face4);
      assertSame(face8, face3);
      assertNotSame(face8, face2);
      assertNotSame(face8, face7);
      assertNotSame(face8, face6);
      assertNull(face8.getNbVICT());
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbOR());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      
      Random.setNextRandom(4);
      Face face9 = de0.getFace();
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face2);
      assertNotNull(face9);
      assertNotSame(face9, face0);
      assertNotSame(face9, face3);
      assertNotSame(face9, face8);
      assertNotSame(face9, face1);
      assertSame(face9, face7);
      assertNotSame(face9, face6);
      assertNotSame(face9, face5);
      assertNotSame(face9, face4);
      assertNotSame(face9, face2);
      assertNull(face9.getNbVICT());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbOR());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbSOL());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face4);
      assertNotEquals(face4, face3);
      assertNotEquals(face4, face7);
      assertNotEquals(face4, face8);
      assertNotEquals(face4, face6);
      assertNotEquals(face4, face9);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face5);
      assertNotSame(face4, face3);
      assertSame(face4, face2);
      assertNotSame(face4, face7);
      assertNotSame(face4, face8);
      assertNotSame(face4, face6);
      assertNotSame(face4, face9);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertNotSame(face4, face5);
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      
      Face face10 = de0.getFace();
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face6);
      assertNotNull(face10);
      assertNotSame(face10, face1);
      assertNotSame(face10, face2);
      assertNotSame(face10, face4);
      assertNotSame(face10, face8);
      assertSame(face10, face9);
      assertNotSame(face10, face5);
      assertSame(face10, face7);
      assertNotSame(face10, face0);
      assertNotSame(face10, face3);
      assertNotSame(face10, face6);
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbOR());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertEquals(Type.NORMAL, face10.getType());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face4);
      assertNotNull(face11);
      assertNotSame(face11, face0);
      assertNotSame(face11, face5);
      assertNotSame(face11, face6);
      assertNotSame(face11, face2);
      assertSame(face11, face9);
      assertNotSame(face11, face1);
      assertNotSame(face11, face8);
      assertSame(face11, face10);
      assertNotSame(face11, face3);
      assertSame(face11, face7);
      assertNotSame(face11, face4);
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      
      de0.setFACE(face3);
      assertNotEquals(face1, face9);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face6);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face10);
      assertNotEquals(face1, face11);
      assertNotEquals(face3, face11);
      assertNotEquals(face3, face7);
      assertNotEquals(face3, face6);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face10);
      assertNotEquals(face3, face5);
      assertNotEquals(face3, face4);
      assertNotSame(face1, face9);
      assertSame(face1, face8);
      assertNotSame(face1, face0);
      assertNotSame(face1, face6);
      assertNotSame(face1, face5);
      assertNotSame(face1, face4);
      assertNotSame(face1, face7);
      assertSame(face1, face3);
      assertNotSame(face1, face2);
      assertNotSame(face1, face10);
      assertNotSame(face1, face11);
      assertSame(face3, face8);
      assertSame(face3, face1);
      assertNotSame(face3, face11);
      assertNotSame(face3, face7);
      assertNotSame(face3, face6);
      assertNotSame(face3, face9);
      assertNotSame(face3, face2);
      assertNotSame(face3, face0);
      assertNotSame(face3, face10);
      assertNotSame(face3, face5);
      assertNotSame(face3, face4);
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbSOL());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbVICT());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbOR());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbSOL());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      
      Random.setNextRandom(4);
      Face face12 = de0.getFace();
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face2);
      assertNotEquals(face12, face6);
      assertNotEquals(face12, face5);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face0);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face3);
      assertNotNull(face12);
      assertNotSame(face12, face4);
      assertNotSame(face12, face5);
      assertNotSame(face12, face2);
      assertNotSame(face12, face6);
      assertNotSame(face12, face8);
      assertSame(face12, face7);
      assertNotSame(face12, face0);
      assertNotSame(face12, face1);
      assertSame(face12, face9);
      assertSame(face12, face10);
      assertSame(face12, face11);
      assertNotSame(face12, face3);
      assertEquals(Ressource.OR, face12.getRes());
      assertEquals(1, (int)face12.getValeur());
      assertEquals(Type.NORMAL, face12.getType());
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbVICT());
      
      Face face13 = de0.getFace();
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face3);
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face5);
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face0);
      assertNotEquals(face13, face2);
      assertNotNull(face13);
      assertSame(face13, face11);
      assertSame(face13, face7);
      assertNotSame(face13, face8);
      assertNotSame(face13, face5);
      assertNotSame(face13, face4);
      assertNotSame(face13, face0);
      assertNotSame(face13, face2);
      assertSame(face13, face10);
      assertNotSame(face13, face3);
      assertNotSame(face13, face6);
      assertNotSame(face13, face1);
      assertSame(face13, face9);
      assertSame(face13, face12);
      assertNull(face13.getNbLUN());
      assertNull(face13.getNbOR());
      assertNull(face13.getNbSOL());
      assertEquals(Ressource.OR, face13.getRes());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Type.NORMAL, face13.getType());
      assertNull(face13.getNbVICT());
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face2);
      assertNotEquals(face2, face12);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face11);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face13);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face1);
      assertNotSame(face2, face7);
      assertNotSame(face2, face6);
      assertNotSame(face2, face8);
      assertNotSame(face2, face0);
      assertNotSame(face2, face5);
      assertNotSame(face2, face12);
      assertSame(face2, face4);
      assertNotSame(face2, face9);
      assertNotSame(face2, face10);
      assertNotSame(face2, face11);
      assertNotSame(face2, face13);
      assertNotSame(face2, face3);
      assertNotSame(face2, face1);
      assertNull(face2.getNbVICT());
      assertNull(face2.getNbLUN());
      assertEquals(Type.NORMAL, face2.getType());
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbOR());
      
      Random.setNextRandom(4);
      Face face14 = de0.getFace();
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face5);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face8);
      assertNotNull(face14);
      assertSame(face14, face12);
      assertNotSame(face14, face0);
      assertSame(face14, face9);
      assertSame(face14, face13);
      assertSame(face14, face11);
      assertSame(face14, face10);
      assertNotSame(face14, face8);
      assertNotSame(face14, face5);
      assertNotSame(face14, face6);
      assertNotSame(face14, face4);
      assertNotSame(face14, face1);
      assertSame(face14, face7);
      assertNotSame(face14, face3);
      assertNotSame(face14, face2);
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertEquals(Ressource.OR, face14.getRes());
      assertNull(face14.getNbSOL());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbVICT());
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face15 = de0.getFace();
      assertNotEquals(face15, face3);
      assertNotEquals(face15, face1);
      assertNotEquals(face15, face2);
      assertNotEquals(face15, face4);
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face6);
      assertNotEquals(face15, face5);
      assertNotEquals(face15, face0);
      assertNotNull(face15);
      assertSame(face15, face10);
      assertNotSame(face15, face3);
      assertNotSame(face15, face1);
      assertSame(face15, face14);
      assertNotSame(face15, face8);
      assertNotSame(face15, face6);
      assertSame(face15, face12);
      assertSame(face15, face11);
      assertSame(face15, face9);
      assertSame(face15, face13);
      assertNotSame(face15, face2);
      assertNotSame(face15, face4);
      assertNotSame(face15, face5);
      assertNotSame(face15, face0);
      assertSame(face15, face7);
      assertNull(face15.getNbOR());
      assertNull(face15.getNbVICT());
      assertEquals(Type.NORMAL, face15.getType());
      assertEquals(Ressource.OR, face15.getRes());
      assertNull(face15.getNbSOL());
      assertEquals(1, (int)face15.getValeur());
      assertNull(face15.getNbLUN());
      
      Random.setNextRandom(4);
      Face face16 = De.compare2Face(face14, face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face2);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face3);
      assertNotEquals(face11, face4);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face5);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face8);
      assertNotEquals(face16, face8);
      assertNotEquals(face16, face1);
      assertNotEquals(face16, face3);
      assertNotEquals(face16, face0);
      assertNotEquals(face16, face4);
      assertNotEquals(face16, face6);
      assertNotEquals(face16, face5);
      assertNotEquals(face16, face2);
      assertNotNull(face16);
      assertNotSame(face11, face5);
      assertNotSame(face11, face6);
      assertNotSame(face11, face2);
      assertNotSame(face11, face1);
      assertNotSame(face11, face8);
      assertSame(face11, face10);
      assertSame(face11, face13);
      assertNotSame(face11, face3);
      assertSame(face11, face14);
      assertSame(face11, face12);
      assertNotSame(face11, face0);
      assertSame(face11, face16);
      assertSame(face11, face9);
      assertSame(face11, face15);
      assertSame(face11, face7);
      assertNotSame(face11, face4);
      assertSame(face14, face12);
      assertSame(face14, face16);
      assertNotSame(face14, face0);
      assertSame(face14, face9);
      assertSame(face14, face13);
      assertSame(face14, face11);
      assertSame(face14, face10);
      assertNotSame(face14, face8);
      assertNotSame(face14, face5);
      assertNotSame(face14, face6);
      assertNotSame(face14, face4);
      assertNotSame(face14, face1);
      assertSame(face14, face7);
      assertSame(face14, face15);
      assertNotSame(face14, face3);
      assertNotSame(face14, face2);
      assertSame(face16, face10);
      assertSame(face16, face15);
      assertNotSame(face16, face3);
      assertSame(face16, face9);
      assertNotSame(face16, face6);
      assertSame(face16, face12);
      assertSame(face16, face14);
      assertSame(face16, face13);
      assertSame(face16, face11);
      assertSame(face16, face7);
      assertNotSame(face16, face8);
      assertNotSame(face16, face1);
      assertNotSame(face16, face0);
      assertNotSame(face16, face4);
      assertNotSame(face16, face5);
      assertNotSame(face16, face2);
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(Ressource.OR, face11.getRes());
      assertEquals(1, (int)face11.getValeur());
      assertNull(face11.getNbSOL());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbLUN());
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertEquals(Ressource.OR, face14.getRes());
      assertNull(face14.getNbSOL());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbVICT());
      assertNull(face16.getNbLUN());
      assertNull(face16.getNbOR());
      assertNull(face16.getNbSOL());
      assertEquals(Ressource.OR, face16.getRes());
      assertEquals(Type.NORMAL, face16.getType());
      assertEquals(1, (int)face16.getValeur());
      assertNull(face16.getNbVICT());
      
      Face face17 = de0.faceMin();
      assertNotEquals(face17, face10);
      assertNotEquals(face17, face0);
      assertNotEquals(face17, face6);
      assertNotEquals(face17, face7);
      assertNotEquals(face17, face8);
      assertNotEquals(face17, face11);
      assertNotEquals(face17, face1);
      assertNotEquals(face17, face5);
      assertNotEquals(face17, face13);
      assertNotEquals(face17, face12);
      assertNotEquals(face17, face14);
      assertNotEquals(face17, face15);
      assertNotEquals(face17, face9);
      assertNotEquals(face17, face3);
      assertNotEquals(face17, face16);
      assertNotNull(face17);
      assertNotSame(face17, face10);
      assertNotSame(face17, face0);
      assertNotSame(face17, face6);
      assertNotSame(face17, face7);
      assertNotSame(face17, face8);
      assertNotSame(face17, face11);
      assertNotSame(face17, face1);
      assertNotSame(face17, face5);
      assertNotSame(face17, face13);
      assertNotSame(face17, face12);
      assertNotSame(face17, face14);
      assertNotSame(face17, face15);
      assertSame(face17, face2);
      assertNotSame(face17, face9);
      assertSame(face17, face4);
      assertNotSame(face17, face3);
      assertNotSame(face17, face16);
      assertNull(face17.getNbSOL());
      assertNull(face17.getNbLUN());
      assertEquals(1, (int)face17.getValeur());
      assertNull(face17.getNbOR());
      assertNull(face17.getNbVICT());
      assertEquals(Type.NORMAL, face17.getType());
      assertEquals(Ressource.OR, face17.getRes());
      
      Face face18 = de0.faceMin();
      assertNotEquals(face18, face10);
      assertNotEquals(face18, face16);
      assertNotEquals(face18, face3);
      assertNotEquals(face18, face14);
      assertNotEquals(face18, face12);
      assertNotEquals(face18, face1);
      assertNotEquals(face18, face13);
      assertNotEquals(face18, face11);
      assertNotEquals(face18, face6);
      assertNotEquals(face18, face9);
      assertNotEquals(face18, face7);
      assertNotEquals(face18, face8);
      assertNotEquals(face18, face15);
      assertNotEquals(face18, face0);
      assertNotEquals(face18, face5);
      assertNotNull(face18);
      assertNotSame(face18, face10);
      assertNotSame(face18, face16);
      assertNotSame(face18, face3);
      assertNotSame(face18, face14);
      assertNotSame(face18, face12);
      assertNotSame(face18, face1);
      assertNotSame(face18, face13);
      assertNotSame(face18, face11);
      assertSame(face18, face17);
      assertSame(face18, face4);
      assertSame(face18, face2);
      assertNotSame(face18, face6);
      assertNotSame(face18, face9);
      assertNotSame(face18, face7);
      assertNotSame(face18, face8);
      assertNotSame(face18, face15);
      assertNotSame(face18, face0);
      assertNotSame(face18, face5);
      assertEquals(Ressource.OR, face18.getRes());
      assertNull(face18.getNbSOL());
      assertEquals(Type.NORMAL, face18.getType());
      assertNull(face18.getNbOR());
      assertNull(face18.getNbVICT());
      assertNull(face18.getNbLUN());
      assertEquals(1, (int)face18.getValeur());
      
      de0.setFACE(face18);
      assertNotEquals(face18, face10);
      assertNotEquals(face18, face16);
      assertNotEquals(face18, face3);
      assertNotEquals(face18, face14);
      assertNotEquals(face18, face12);
      assertNotEquals(face18, face1);
      assertNotEquals(face18, face13);
      assertNotEquals(face18, face11);
      assertNotEquals(face18, face6);
      assertNotEquals(face18, face9);
      assertNotEquals(face18, face7);
      assertNotEquals(face18, face8);
      assertNotEquals(face18, face15);
      assertNotEquals(face18, face0);
      assertNotEquals(face18, face5);
      assertNotSame(face18, face10);
      assertNotSame(face18, face16);
      assertNotSame(face18, face3);
      assertNotSame(face18, face14);
      assertNotSame(face18, face12);
      assertNotSame(face18, face1);
      assertNotSame(face18, face13);
      assertNotSame(face18, face11);
      assertSame(face18, face17);
      assertSame(face18, face4);
      assertSame(face18, face2);
      assertNotSame(face18, face6);
      assertNotSame(face18, face9);
      assertNotSame(face18, face7);
      assertNotSame(face18, face8);
      assertNotSame(face18, face15);
      assertNotSame(face18, face0);
      assertNotSame(face18, face5);
      assertEquals(Ressource.OR, face18.getRes());
      assertNull(face18.getNbSOL());
      assertEquals(Type.NORMAL, face18.getType());
      assertNull(face18.getNbOR());
      assertNull(face18.getNbVICT());
      assertNull(face18.getNbLUN());
      assertEquals(1, (int)face18.getValeur());
  }

  @Test(timeout = 4000)
  public void test46() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      de0.FACE4 = de0.FACE5;
      assertNull(de0.FACE4.getNbLUN());
      assertNull(de0.FACE4.getNbOR());
      assertNull(de0.FACE4.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE4.getRes());
      assertEquals(1, (int)de0.FACE4.getValeur());
      assertEquals(Type.NORMAL, de0.FACE4.getType());
      assertNull(de0.FACE4.getNbVICT());
      
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      String string0 = de0.toString();
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(de0.FACE6);
      String string1 = de0.toString();
      assertNotEquals(string1, string0);
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      String string2 = de0.toString();
      assertNotEquals(string2, string0);
      assertEquals(string2, string1);
      assertEquals("\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      Face face0 = de0.faceMin();
      assertNotNull(face0);
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Type.NORMAL, face0.getType());
      
      Face face1 = De.compare2Face(de0.FACE6, de0.FACE2);
      assertNotNull(face1);
      assertSame(face1, face0);
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      
      de0.initDe2();
      Face face2 = De.compare2Face(face0, de0.FACE5);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face0, face2);
      assertSame(face0, face1);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      
      String string3 = de0.toString();
      assertNotEquals(string3, string1);
      assertNotEquals(string3, string0);
      assertNotEquals(string3, string2);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string3);
      assertNotNull(string3);
      
      Face face3 = De.compare2Face(de0.FACE1, face2);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotEquals(face0, face2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face3);
      assertNotSame(face3, face2);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertNotSame(face0, face3);
      assertNotSame(face0, face2);
      assertSame(face0, face1);
      assertNotSame(face2, face0);
      assertNotSame(face2, face3);
      assertNotSame(face2, face1);
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbVICT());
      assertEquals(Ressource.SOLAIRE, face0.getRes());
      assertNull(face0.getNbSOL());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.LUNAIRE, face2.getRes());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbSOL());
      assertNull(face2.getNbOR());
      
      de0.setFACE(de0.FACE5);
      Face face4 = de0.FACE6;
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotNull(face4);
      assertNotSame(face4, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertEquals(2, (int)face4.getValeur());
      
      Face face5 = De.compare2Face(face1, face4);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face3);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face3);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face4);
      assertNotNull(face5);
      assertNotSame(face4, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertNotSame(face4, face3);
      assertNotSame(face4, face5);
      assertNotSame(face5, face2);
      assertSame(face5, face1);
      assertSame(face5, face0);
      assertNotSame(face5, face4);
      assertNotSame(face5, face3);
      assertNotSame(face1, face3);
      assertSame(face1, face5);
      assertSame(face1, face0);
      assertNotSame(face1, face2);
      assertNotSame(face1, face4);
      assertNull(face4.getNbLUN());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertEquals(Ressource.VICTOIRE, face4.getRes());
      assertEquals(Type.NORMAL, face4.getType());
      assertNull(face4.getNbSOL());
      assertEquals(2, (int)face4.getValeur());
      assertEquals(Ressource.SOLAIRE, face5.getRes());
      assertNull(face5.getNbSOL());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.SOLAIRE, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
  }

  @Test(timeout = 4000)
  public void test47() {
      Random.setNextRandom(1747);
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe1();
      Face face0 = de0.FACE5;
      assertNotNull(face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      
      de0.FACE1 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE1.getRes());
      assertEquals(1, (int)de0.FACE1.getValeur());
      assertEquals(Type.NORMAL, de0.FACE1.getType());
      assertNull(de0.FACE1.getNbSOL());
      assertNull(de0.FACE1.getNbLUN());
      assertNull(de0.FACE1.getNbOR());
      assertNull(de0.FACE1.getNbVICT());
      
      de0.setFACE(face0);
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      
      Face face1 = de0.getFace();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      
      de0.FACE3 = de0.FACE4;
      assertNull(de0.FACE3.getNbOR());
      assertNull(de0.FACE3.getNbVICT());
      assertNull(de0.FACE3.getNbLUN());
      assertEquals(1, (int)de0.FACE3.getValeur());
      assertNull(de0.FACE3.getNbSOL());
      assertEquals(Type.NORMAL, de0.FACE3.getType());
      assertEquals(Ressource.OR, de0.FACE3.getRes());
      
      de0.FACE2 = face0;
      assertEquals(Ressource.OR, face0.getRes());
      assertEquals(1, (int)face0.getValeur());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face0.getNbVICT());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbSOL());
      assertNull(de0.FACE2.getNbVICT());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(1, (int)de0.FACE2.getValeur());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(Ressource.OR, de0.FACE2.getRes());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      
      Face face2 = De.compare2Face(face1, de0.FACE2);
      assertNotEquals(face1, face0);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertSame(face1, face2);
      assertNotSame(face1, face0);
      assertNotSame(face2, face0);
      assertSame(face2, face1);
      assertEquals(Ressource.OR, face1.getRes());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      assertNull(face1.getNbOR());
      assertNull(face1.getNbLUN());
      assertNull(face1.getNbVICT());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbSOL());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face3 = de0.getFace();
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertSame(face3, face0);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbOR());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(Ressource.OR, face3.getRes());
      
      Face face4 = de0.faceMin();
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face2);
      assertNotNull(face4);
      assertSame(face4, face0);
      assertSame(face4, face3);
      assertNotSame(face4, face1);
      assertNotSame(face4, face2);
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(Type.NORMAL, face4.getType());
      
      Random.setNextRandom(1747);
      Face face5 = de0.getFace();
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face1);
      assertNotNull(face5);
      assertSame(face5, face0);
      assertNotSame(face5, face2);
      assertNotSame(face5, face1);
      assertSame(face5, face3);
      assertSame(face5, face4);
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      
      Face face6 = De.compare2Face(de0.FACE2, de0.FACE2);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face2);
      assertNotNull(face6);
      assertNotSame(face6, face1);
      assertSame(face6, face3);
      assertSame(face6, face0);
      assertSame(face6, face4);
      assertSame(face6, face5);
      assertNotSame(face6, face2);
      assertNull(face6.getNbLUN());
      assertNull(face6.getNbOR());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(1, (int)face6.getValeur());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face2);
      assertNotNull(face7);
      assertSame(face7, face5);
      assertSame(face7, face6);
      assertNotSame(face7, face1);
      assertSame(face7, face4);
      assertNotSame(face7, face2);
      assertSame(face7, face0);
      assertSame(face7, face3);
      assertNull(face7.getNbSOL());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbVICT());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      assertEquals(Type.NORMAL, face7.getType());
      
      Random.setNextRandom(3);
      Face face8 = de0.getFace();
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face7);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face5);
      assertNotNull(face8);
      assertNotSame(face8, face6);
      assertNotSame(face8, face3);
      assertNotSame(face8, face2);
      assertNotSame(face8, face0);
      assertNotSame(face8, face1);
      assertNotSame(face8, face7);
      assertNotSame(face8, face4);
      assertNotSame(face8, face5);
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(1, (int)face8.getValeur());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertNull(face8.getNbLUN());
      
      Random.setNextRandom(1747);
      Random.setNextRandom((-1761));
      Face face9 = de0.getFace();
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face1);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face0);
      assertNotNull(face9);
      assertNotSame(face9, face7);
      assertNotSame(face9, face4);
      assertNotSame(face9, face6);
      assertNotSame(face9, face1);
      assertNotSame(face9, face5);
      assertNotSame(face9, face2);
      assertNotSame(face9, face3);
      assertNotSame(face9, face0);
      assertSame(face9, face8);
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbOR());
      assertNull(face9.getNbSOL());
      assertEquals(1, (int)face9.getValeur());
      assertEquals(Type.NORMAL, face9.getType());
      assertEquals(Ressource.OR, face9.getRes());
      assertNull(face9.getNbVICT());
      
      Random.setNextRandom(1747);
      Face face10 = de0.faceMin();
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face8);
      assertNotNull(face10);
      assertSame(face10, face5);
      assertNotSame(face10, face9);
      assertSame(face10, face3);
      assertSame(face10, face7);
      assertSame(face10, face0);
      assertNotSame(face10, face2);
      assertSame(face10, face4);
      assertNotSame(face10, face1);
      assertNotSame(face10, face8);
      assertSame(face10, face6);
      assertNull(face10.getNbSOL());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbOR());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      
      Random.setNextRandom(2676);
      Face face11 = de0.getFace();
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face2);
      assertNotNull(face11);
      assertSame(face11, face0);
      assertSame(face11, face4);
      assertSame(face11, face3);
      assertSame(face11, face7);
      assertSame(face11, face6);
      assertSame(face11, face10);
      assertNotSame(face11, face1);
      assertNotSame(face11, face9);
      assertNotSame(face11, face8);
      assertSame(face11, face5);
      assertNotSame(face11, face2);
      assertEquals(Type.NORMAL, face11.getType());
      assertEquals(1, (int)face11.getValeur());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbSOL());
      assertNull(face11.getNbOR());
      assertNull(face11.getNbLUN());
      assertNull(face11.getNbVICT());
      
      String string2 = de0.toString();
      assertEquals(string2, string1);
      assertEquals(string2, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string2);
      assertNotNull(string2);
      
      de0.setFACE(face5);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face9);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face8);
      assertSame(face5, face0);
      assertNotSame(face5, face2);
      assertSame(face5, face7);
      assertNotSame(face5, face9);
      assertSame(face5, face11);
      assertSame(face5, face6);
      assertSame(face5, face10);
      assertNotSame(face5, face1);
      assertSame(face5, face3);
      assertNotSame(face5, face8);
      assertSame(face5, face4);
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      
      Face face12 = De.compare2Face(de0.FACE1, face7);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face8);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face9);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face9);
      assertNotEquals(face12, face2);
      assertNotNull(face12);
      assertSame(face7, face5);
      assertNotSame(face7, face1);
      assertSame(face7, face6);
      assertNotSame(face7, face8);
      assertSame(face7, face4);
      assertSame(face7, face12);
      assertNotSame(face7, face2);
      assertSame(face7, face0);
      assertSame(face7, face10);
      assertSame(face7, face3);
      assertNotSame(face7, face9);
      assertSame(face7, face11);
      assertSame(face12, face4);
      assertSame(face12, face7);
      assertSame(face12, face0);
      assertSame(face12, face10);
      assertNotSame(face12, face1);
      assertSame(face12, face6);
      assertSame(face12, face3);
      assertNotSame(face12, face9);
      assertSame(face12, face11);
      assertNotSame(face12, face8);
      assertSame(face12, face5);
      assertNotSame(face12, face2);
      assertNull(face7.getNbSOL());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbLUN());
      assertNull(face7.getNbVICT());
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbOR());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(Ressource.OR, face12.getRes());
      assertEquals(Type.NORMAL, face12.getType());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbLUN());
      assertNull(face12.getNbVICT());
      
      Face face13 = de0.faceMin();
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face9);
      assertNotEquals(face13, face2);
      assertNotNull(face13);
      assertSame(face13, face10);
      assertNotSame(face13, face9);
      assertSame(face13, face11);
      assertSame(face13, face5);
      assertSame(face13, face12);
      assertNotSame(face13, face2);
      assertNotSame(face13, face1);
      assertSame(face13, face6);
      assertNotSame(face13, face8);
      assertSame(face13, face3);
      assertSame(face13, face7);
      assertSame(face13, face0);
      assertSame(face13, face4);
      assertNull(face13.getNbLUN());
      assertNull(face13.getNbSOL());
      assertNull(face13.getNbOR());
      assertEquals(Type.NORMAL, face13.getType());
      assertEquals(1, (int)face13.getValeur());
      assertEquals(Ressource.OR, face13.getRes());
      assertNull(face13.getNbVICT());
      
      Face face14 = De.compare2Face(de0.FACE6, face10);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face8);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face1);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face9);
      assertNotNull(face14);
      assertSame(face10, face3);
      assertSame(face10, face11);
      assertSame(face10, face7);
      assertSame(face10, face14);
      assertSame(face10, face12);
      assertNotSame(face10, face2);
      assertNotSame(face10, face1);
      assertSame(face10, face13);
      assertSame(face10, face5);
      assertNotSame(face10, face9);
      assertSame(face10, face0);
      assertSame(face10, face4);
      assertNotSame(face10, face8);
      assertSame(face10, face6);
      assertSame(face14, face13);
      assertSame(face14, face3);
      assertNotSame(face14, face8);
      assertNotSame(face14, face1);
      assertSame(face14, face12);
      assertSame(face14, face4);
      assertSame(face14, face6);
      assertSame(face14, face5);
      assertNotSame(face14, face2);
      assertSame(face14, face0);
      assertNotSame(face14, face9);
      assertSame(face14, face11);
      assertSame(face14, face10);
      assertSame(face14, face7);
      assertNull(face10.getNbSOL());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbOR());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face14.getNbLUN());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbVICT());
      assertNull(face14.getNbSOL());
      assertEquals(Type.NORMAL, face14.getType());
      assertEquals(1, (int)face14.getValeur());
      assertEquals(Ressource.OR, face14.getRes());
      
      Face face15 = de0.faceMin();
      assertNotEquals(face15, face1);
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face9);
      assertNotEquals(face15, face2);
      assertNotNull(face15);
      assertSame(face15, face10);
      assertNotSame(face15, face9);
      assertSame(face15, face0);
      assertSame(face15, face11);
      assertSame(face15, face5);
      assertSame(face15, face14);
      assertSame(face15, face12);
      assertNotSame(face15, face2);
      assertNotSame(face15, face1);
      assertSame(face15, face13);
      assertSame(face15, face3);
      assertNotSame(face15, face8);
      assertSame(face15, face6);
      assertSame(face15, face7);
      assertSame(face15, face4);
      assertNull(face15.getNbLUN());
      assertNull(face15.getNbOR());
      assertNull(face15.getNbSOL());
      assertEquals(1, (int)face15.getValeur());
      assertEquals(Type.NORMAL, face15.getType());
      assertEquals(Ressource.OR, face15.getRes());
      assertNull(face15.getNbVICT());
      
      String string3 = de0.toString();
      assertEquals(string3, string2);
      assertEquals(string3, string1);
      assertEquals(string3, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test48() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE6;
      assertNotNull(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      
      de0.FACE2 = face0;
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      assertNull(de0.FACE2.getNbLUN());
      assertEquals(Ressource.VICTOIRE, de0.FACE2.getRes());
      assertNull(de0.FACE2.getNbOR());
      assertNull(de0.FACE2.getNbSOL());
      assertEquals(2, (int)de0.FACE2.getValeur());
      assertEquals(Type.NORMAL, de0.FACE2.getType());
      assertNull(de0.FACE2.getNbVICT());
      
      de0.setFACE(de0.FACE3);
      de0.setFACE(de0.FACE6);
      de0.setFACE(face0);
      assertEquals(Type.NORMAL, face0.getType());
      assertEquals(2, (int)face0.getValeur());
      assertNull(face0.getNbSOL());
      assertNull(face0.getNbLUN());
      assertNull(face0.getNbOR());
      assertEquals(Ressource.VICTOIRE, face0.getRes());
      assertNull(face0.getNbVICT());
      
      de0.initDe1();
      de0.initDe2();
      Face face1 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      
      Face face2 = de0.faceMin();
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotNull(face2);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotSame(face2, face0);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      
      Face face3 = De.compare2Face(de0.FACE1, de0.FACE2);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotNull(face3);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      
      de0.setFACE(face3);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      
      de0.initDe2();
      de0.setFACE(face2);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertNotSame(face2, face1);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      
      Face face4 = De.compare2Face(face3, face3);
      assertNotEquals(face4, face0);
      assertNotEquals(face4, face1);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face0);
      assertNotNull(face4);
      assertSame(face4, face3);
      assertSame(face4, face2);
      assertNotSame(face4, face0);
      assertNotSame(face4, face1);
      assertNotSame(face3, face1);
      assertNotSame(face3, face0);
      assertSame(face3, face2);
      assertSame(face3, face4);
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertNull(face4.getNbLUN());
      assertEquals(Type.NORMAL, face4.getType());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbSOL());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbVICT());
      assertNull(face3.getNbLUN());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      
      de0.initDe2();
      Face face5 = de0.FACE6;
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotNull(face5);
      assertNotSame(face5, face0);
      assertNotSame(face5, face2);
      assertNotSame(face5, face4);
      assertNotSame(face5, face1);
      assertNotSame(face5, face3);
      assertEquals(2, (int)face5.getValeur());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      
      Face face6 = De.compare2Face(face5, de0.FACE4);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face3);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face1);
      assertNotNull(face6);
      assertNotSame(face5, face0);
      assertNotSame(face5, face6);
      assertNotSame(face5, face4);
      assertNotSame(face5, face2);
      assertNotSame(face5, face3);
      assertNotSame(face5, face1);
      assertNotSame(face6, face4);
      assertNotSame(face6, face3);
      assertNotSame(face6, face0);
      assertNotSame(face6, face2);
      assertNotSame(face6, face5);
      assertNotSame(face6, face1);
      assertEquals(2, (int)face5.getValeur());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbLUN());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbOR());
      assertEquals(Type.NORMAL, face6.getType());
      
      Face face7 = de0.faceMin();
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face2);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face0);
      assertNotNull(face7);
      assertNotSame(face7, face6);
      assertNotSame(face7, face4);
      assertNotSame(face7, face1);
      assertNotSame(face7, face3);
      assertNotSame(face7, face2);
      assertNotSame(face7, face5);
      assertNotSame(face7, face0);
      assertEquals(Ressource.OR, face7.getRes());
      assertNull(face7.getNbSOL());
      assertEquals(Type.NORMAL, face7.getType());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      assertEquals(1, (int)face7.getValeur());
      
      Face face8 = de0.getFace();
      assertNotEquals(face8, face1);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face0);
      assertNotNull(face8);
      assertNotSame(face8, face1);
      assertNotSame(face8, face2);
      assertSame(face8, face7);
      assertNotSame(face8, face4);
      assertNotSame(face8, face3);
      assertNotSame(face8, face6);
      assertNotSame(face8, face5);
      assertNotSame(face8, face0);
      assertNull(face8.getNbLUN());
      assertNull(face8.getNbVICT());
      assertEquals(Ressource.OR, face8.getRes());
      assertEquals(1, (int)face8.getValeur());
      assertEquals(Type.NORMAL, face8.getType());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbOR());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face6);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face5);
      assertNotSame(face2, face6);
      assertNotSame(face2, face8);
      assertNotSame(face2, face7);
      assertNotSame(face2, face0);
      assertSame(face2, face3);
      assertSame(face2, face4);
      assertNotSame(face2, face1);
      assertNotSame(face2, face5);
      assertNull(face2.getNbSOL());
      assertEquals(Ressource.OR, face2.getRes());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbVICT());
      assertEquals(Type.NORMAL, face2.getType());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face2);
      assertNotEquals(face1, face5);
      assertNotEquals(face1, face0);
      assertNotEquals(face1, face7);
      assertNotEquals(face1, face8);
      assertNotEquals(face1, face3);
      assertNotEquals(face1, face4);
      assertNotEquals(face1, face6);
      assertNotSame(face1, face2);
      assertNotSame(face1, face5);
      assertNotSame(face1, face0);
      assertNotSame(face1, face7);
      assertNotSame(face1, face8);
      assertNotSame(face1, face3);
      assertNotSame(face1, face4);
      assertNotSame(face1, face6);
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbOR());
      assertEquals(Type.NORMAL, face1.getType());
      assertEquals(Ressource.LUNAIRE, face1.getRes());
      assertNull(face1.getNbSOL());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbLUN());
      
      Face face9 = de0.getFace();
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face6);
      assertNotNull(face9);
      assertNotSame(face9, face8);
      assertNotSame(face9, face3);
      assertNotSame(face9, face4);
      assertNotSame(face9, face7);
      assertNotSame(face9, face5);
      assertNotSame(face9, face0);
      assertNotSame(face9, face2);
      assertNotSame(face9, face6);
      assertSame(face9, face1);
      assertEquals(Ressource.LUNAIRE, face9.getRes());
      assertNull(face9.getNbSOL());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      
      de0.setFACE(face9);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face6);
      assertNotSame(face9, face8);
      assertNotSame(face9, face3);
      assertNotSame(face9, face4);
      assertNotSame(face9, face7);
      assertNotSame(face9, face5);
      assertNotSame(face9, face0);
      assertNotSame(face9, face2);
      assertNotSame(face9, face6);
      assertSame(face9, face1);
      assertEquals(Ressource.LUNAIRE, face9.getRes());
      assertNull(face9.getNbSOL());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      
      de0.initDe2();
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[34m1 LUNAIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      de0.setFACE(face9);
      assertNotEquals(face9, face8);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face7);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face6);
      assertNotSame(face9, face8);
      assertNotSame(face9, face3);
      assertNotSame(face9, face4);
      assertNotSame(face9, face7);
      assertNotSame(face9, face5);
      assertNotSame(face9, face0);
      assertNotSame(face9, face2);
      assertNotSame(face9, face6);
      assertSame(face9, face1);
      assertEquals(Ressource.LUNAIRE, face9.getRes());
      assertNull(face9.getNbSOL());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbVICT());
      assertNull(face9.getNbLUN());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      
      de0.initDe1();
      Face face10 = de0.faceMin();
      assertNotEquals(face10, face2);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face4);
      assertNotEquals(face10, face5);
      assertNotEquals(face10, face3);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face6);
      assertNotEquals(face10, face8);
      assertNotNull(face10);
      assertNotSame(face10, face2);
      assertNotSame(face10, face0);
      assertNotSame(face10, face1);
      assertNotSame(face10, face7);
      assertNotSame(face10, face4);
      assertNotSame(face10, face5);
      assertNotSame(face10, face3);
      assertNotSame(face10, face9);
      assertNotSame(face10, face6);
      assertNotSame(face10, face8);
      assertNull(face10.getNbVICT());
      assertEquals(Type.NORMAL, face10.getType());
      assertNull(face10.getNbOR());
      assertEquals(Ressource.OR, face10.getRes());
      assertNull(face10.getNbSOL());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbLUN());
      
      de0.setFACE(face6);
      assertNotEquals(face5, face0);
      assertNotEquals(face5, face6);
      assertNotEquals(face5, face10);
      assertNotEquals(face5, face8);
      assertNotEquals(face5, face7);
      assertNotEquals(face5, face4);
      assertNotEquals(face5, face9);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face3);
      assertNotEquals(face5, face1);
      assertNotEquals(face6, face4);
      assertNotEquals(face6, face9);
      assertNotEquals(face6, face3);
      assertNotEquals(face6, face7);
      assertNotEquals(face6, face10);
      assertNotEquals(face6, face8);
      assertNotEquals(face6, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face5);
      assertNotEquals(face6, face1);
      assertNotSame(face5, face0);
      assertNotSame(face5, face6);
      assertNotSame(face5, face10);
      assertNotSame(face5, face8);
      assertNotSame(face5, face7);
      assertNotSame(face5, face4);
      assertNotSame(face5, face9);
      assertNotSame(face5, face2);
      assertNotSame(face5, face3);
      assertNotSame(face5, face1);
      assertNotSame(face6, face4);
      assertNotSame(face6, face9);
      assertNotSame(face6, face3);
      assertNotSame(face6, face7);
      assertNotSame(face6, face10);
      assertNotSame(face6, face8);
      assertNotSame(face6, face0);
      assertNotSame(face6, face2);
      assertNotSame(face6, face5);
      assertNotSame(face6, face1);
      assertEquals(2, (int)face5.getValeur());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertEquals(Ressource.VICTOIRE, face5.getRes());
      assertNull(face5.getNbSOL());
      assertNull(face5.getNbOR());
      assertEquals(Type.NORMAL, face5.getType());
      assertNull(face6.getNbSOL());
      assertEquals(Ressource.OR, face6.getRes());
      assertNull(face6.getNbLUN());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbVICT());
      assertNull(face6.getNbOR());
      assertEquals(Type.NORMAL, face6.getType());
      
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test49() {
      De de0 = new De();
      assertNotNull(de0);
      
      de0.initDe2();
      Face face0 = de0.FACE3;
      assertNotNull(face0);
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      
      Face face1 = de0.faceMin();
      assertNotEquals(face1, face0);
      assertNotNull(face1);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      
      de0.setFACE(face1);
      assertNotEquals(face1, face0);
      assertNotSame(face1, face0);
      assertEquals(Type.NORMAL, face1.getType());
      assertNull(face1.getNbVICT());
      assertNull(face1.getNbLUN());
      assertEquals(Ressource.OR, face1.getRes());
      assertNull(face1.getNbOR());
      assertEquals(1, (int)face1.getValeur());
      assertNull(face1.getNbSOL());
      
      de0.initDe1();
      Face face2 = De.compare2Face(de0.FACE5, de0.FACE6);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotNull(face2);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      
      Face face3 = de0.faceMin();
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotNull(face3);
      assertNotSame(face3, face0);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string0);
      assertNotNull(string0);
      
      de0.setFACE(face3);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotSame(face3, face0);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      Face face4 = De.compare2Face(de0.FACE1, de0.FACE2);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotNull(face4);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertSame(face4, face3);
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertEquals(Type.NORMAL, face4.getType());
      
      de0.setFACE(face4);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertNotSame(face4, face0);
      assertSame(face4, face3);
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertEquals(Type.NORMAL, face4.getType());
      
      de0.initDe2();
      de0.setFACE(face3);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotSame(face3, face0);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      Face face5 = De.compare2Face(face4, face4);
      assertNotEquals(face5, face1);
      assertNotEquals(face5, face2);
      assertNotEquals(face5, face0);
      assertNotEquals(face4, face2);
      assertNotEquals(face4, face1);
      assertNotEquals(face4, face0);
      assertNotNull(face5);
      assertNotSame(face5, face1);
      assertNotSame(face5, face2);
      assertSame(face5, face3);
      assertNotSame(face5, face0);
      assertSame(face5, face4);
      assertNotSame(face4, face2);
      assertNotSame(face4, face1);
      assertSame(face4, face5);
      assertNotSame(face4, face0);
      assertSame(face4, face3);
      assertEquals(Type.NORMAL, face5.getType());
      assertEquals(1, (int)face5.getValeur());
      assertNull(face5.getNbVICT());
      assertNull(face5.getNbLUN());
      assertNull(face5.getNbOR());
      assertNull(face5.getNbSOL());
      assertEquals(Ressource.OR, face5.getRes());
      assertEquals(Ressource.OR, face4.getRes());
      assertNull(face4.getNbSOL());
      assertNull(face4.getNbLUN());
      assertEquals(1, (int)face4.getValeur());
      assertNull(face4.getNbOR());
      assertNull(face4.getNbVICT());
      assertEquals(Type.NORMAL, face4.getType());
      
      de0.initDe2();
      Face face6 = De.compare2Face(face3, face0);
      assertNotEquals(face6, face2);
      assertNotEquals(face6, face1);
      assertNotEquals(face6, face0);
      assertNotEquals(face0, face1);
      assertNotEquals(face0, face2);
      assertNotEquals(face0, face3);
      assertNotEquals(face0, face5);
      assertNotEquals(face0, face4);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face2);
      assertNotNull(face6);
      assertSame(face6, face4);
      assertNotSame(face6, face2);
      assertNotSame(face6, face1);
      assertNotSame(face6, face0);
      assertSame(face6, face5);
      assertSame(face6, face3);
      assertNotSame(face0, face1);
      assertNotSame(face0, face2);
      assertNotSame(face0, face6);
      assertNotSame(face0, face3);
      assertNotSame(face0, face5);
      assertNotSame(face0, face4);
      assertNotSame(face3, face0);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face2);
      assertSame(face3, face5);
      assertSame(face3, face6);
      assertNull(face6.getNbLUN());
      assertEquals(Ressource.OR, face6.getRes());
      assertEquals(1, (int)face6.getValeur());
      assertNull(face6.getNbSOL());
      assertNull(face6.getNbOR());
      assertEquals(Type.NORMAL, face6.getType());
      assertNull(face6.getNbVICT());
      assertNull(face0.getNbSOL());
      assertEquals(Ressource.OR, face0.getRes());
      assertNull(face0.getNbLUN());
      assertEquals(1, (int)face0.getValeur());
      assertNull(face0.getNbOR());
      assertNull(face0.getNbVICT());
      assertEquals(Type.NORMAL, face0.getType());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      Face face7 = de0.getFace();
      assertNotEquals(face7, face3);
      assertNotEquals(face7, face4);
      assertNotEquals(face7, face0);
      assertNotEquals(face7, face5);
      assertNotEquals(face7, face6);
      assertNotEquals(face7, face1);
      assertNotEquals(face7, face2);
      assertNotNull(face7);
      assertNotSame(face7, face3);
      assertNotSame(face7, face4);
      assertNotSame(face7, face0);
      assertNotSame(face7, face5);
      assertNotSame(face7, face6);
      assertNotSame(face7, face1);
      assertNotSame(face7, face2);
      assertEquals(Ressource.OR, face7.getRes());
      assertEquals(Type.NORMAL, face7.getType());
      assertEquals(1, (int)face7.getValeur());
      assertNull(face7.getNbSOL());
      assertNull(face7.getNbOR());
      assertNull(face7.getNbVICT());
      assertNull(face7.getNbLUN());
      
      Face face8 = de0.faceMin();
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face1);
      assertNotNull(face8);
      assertSame(face8, face7);
      assertNotSame(face8, face0);
      assertNotSame(face8, face5);
      assertNotSame(face8, face6);
      assertNotSame(face8, face2);
      assertNotSame(face8, face4);
      assertNotSame(face8, face3);
      assertNotSame(face8, face1);
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbLUN());
      assertEquals(1, (int)face8.getValeur());
      
      Face face9 = de0.getFace();
      assertNotEquals(face9, face4);
      assertNotEquals(face9, face0);
      assertNotEquals(face9, face5);
      assertNotEquals(face9, face6);
      assertNotEquals(face9, face3);
      assertNotEquals(face9, face2);
      assertNotEquals(face9, face1);
      assertNotNull(face9);
      assertNotSame(face9, face4);
      assertSame(face9, face8);
      assertSame(face9, face7);
      assertNotSame(face9, face0);
      assertNotSame(face9, face5);
      assertNotSame(face9, face6);
      assertNotSame(face9, face3);
      assertNotSame(face9, face2);
      assertNotSame(face9, face1);
      assertNull(face9.getNbVICT());
      assertEquals(Ressource.OR, face9.getRes());
      assertEquals(Type.NORMAL, face9.getType());
      assertNull(face9.getNbSOL());
      assertNull(face9.getNbOR());
      assertEquals(1, (int)face9.getValeur());
      assertNull(face9.getNbLUN());
      
      de0.setFACE(face3);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face7);
      assertNotSame(face3, face0);
      assertNotSame(face3, face9);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face8);
      assertNotSame(face3, face2);
      assertSame(face3, face5);
      assertNotSame(face3, face7);
      assertSame(face3, face6);
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      de0.setFACE(face2);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face6);
      assertNotSame(face2, face3);
      assertNotSame(face2, face4);
      assertNotSame(face2, face7);
      assertNotSame(face2, face8);
      assertNotSame(face2, face9);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNotSame(face2, face5);
      assertNotSame(face2, face6);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      
      Face face10 = De.compare2Face(de0.FACE5, face3);
      assertNotEquals(face10, face9);
      assertNotEquals(face10, face7);
      assertNotEquals(face10, face8);
      assertNotEquals(face10, face0);
      assertNotEquals(face10, face1);
      assertNotEquals(face10, face2);
      assertNotEquals(face3, face0);
      assertNotEquals(face3, face9);
      assertNotEquals(face3, face1);
      assertNotEquals(face3, face8);
      assertNotEquals(face3, face2);
      assertNotEquals(face3, face7);
      assertNotNull(face10);
      assertNotSame(face10, face9);
      assertSame(face10, face3);
      assertNotSame(face10, face7);
      assertNotSame(face10, face8);
      assertNotSame(face10, face0);
      assertSame(face10, face4);
      assertSame(face10, face5);
      assertNotSame(face10, face1);
      assertNotSame(face10, face2);
      assertSame(face10, face6);
      assertNotSame(face3, face0);
      assertNotSame(face3, face9);
      assertSame(face3, face4);
      assertNotSame(face3, face1);
      assertNotSame(face3, face8);
      assertNotSame(face3, face2);
      assertSame(face3, face5);
      assertSame(face3, face10);
      assertNotSame(face3, face7);
      assertSame(face3, face6);
      assertNull(face10.getNbOR());
      assertNull(face10.getNbSOL());
      assertEquals(Ressource.OR, face10.getRes());
      assertEquals(Type.NORMAL, face10.getType());
      assertEquals(1, (int)face10.getValeur());
      assertNull(face10.getNbVICT());
      assertNull(face10.getNbLUN());
      assertNull(face3.getNbOR());
      assertNull(face3.getNbLUN());
      assertNull(face3.getNbSOL());
      assertEquals(Ressource.OR, face3.getRes());
      assertEquals(Type.NORMAL, face3.getType());
      assertEquals(1, (int)face3.getValeur());
      assertNull(face3.getNbVICT());
      
      Face face11 = de0.getFace();
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face3);
      assertNotNull(face11);
      assertNotSame(face11, face0);
      assertNotSame(face11, face5);
      assertNotSame(face11, face10);
      assertNotSame(face11, face4);
      assertNotSame(face11, face9);
      assertSame(face11, face2);
      assertNotSame(face11, face7);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNotSame(face11, face1);
      assertNotSame(face11, face3);
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbOR());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbSOL());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbLUN());
      assertEquals(1, (int)face11.getValeur());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face3);
      assertNotSame(face11, face0);
      assertNotSame(face11, face5);
      assertNotSame(face11, face10);
      assertNotSame(face11, face4);
      assertNotSame(face11, face9);
      assertSame(face11, face2);
      assertNotSame(face11, face7);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNotSame(face11, face1);
      assertNotSame(face11, face3);
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbOR());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbSOL());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbLUN());
      assertEquals(1, (int)face11.getValeur());
      
      de0.initDe2();
      de0.initDe1();
      String string1 = de0.toString();
      assertEquals(string1, string0);
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[31m1 SOLAIRE\u001B[0m", string1);
      assertNotNull(string1);
      
      Face face12 = De.compare2Face(face11, face2);
      assertNotEquals(face2, face3);
      assertNotEquals(face2, face4);
      assertNotEquals(face2, face7);
      assertNotEquals(face2, face8);
      assertNotEquals(face2, face9);
      assertNotEquals(face2, face1);
      assertNotEquals(face2, face0);
      assertNotEquals(face2, face5);
      assertNotEquals(face2, face10);
      assertNotEquals(face2, face6);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face3);
      assertNotEquals(face12, face3);
      assertNotEquals(face12, face4);
      assertNotEquals(face12, face8);
      assertNotEquals(face12, face1);
      assertNotEquals(face12, face0);
      assertNotEquals(face12, face5);
      assertNotEquals(face12, face6);
      assertNotEquals(face12, face10);
      assertNotEquals(face12, face9);
      assertNotEquals(face12, face7);
      assertNotNull(face12);
      assertSame(face2, face12);
      assertNotSame(face2, face3);
      assertNotSame(face2, face4);
      assertNotSame(face2, face7);
      assertNotSame(face2, face8);
      assertSame(face2, face11);
      assertNotSame(face2, face9);
      assertNotSame(face2, face1);
      assertNotSame(face2, face0);
      assertNotSame(face2, face10);
      assertNotSame(face2, face5);
      assertNotSame(face2, face6);
      assertNotSame(face11, face0);
      assertNotSame(face11, face10);
      assertNotSame(face11, face5);
      assertNotSame(face11, face4);
      assertNotSame(face11, face9);
      assertSame(face11, face2);
      assertNotSame(face11, face7);
      assertSame(face11, face12);
      assertNotSame(face11, face6);
      assertNotSame(face11, face8);
      assertNotSame(face11, face1);
      assertNotSame(face11, face3);
      assertNotSame(face12, face3);
      assertNotSame(face12, face4);
      assertNotSame(face12, face8);
      assertNotSame(face12, face1);
      assertNotSame(face12, face0);
      assertNotSame(face12, face5);
      assertNotSame(face12, face6);
      assertNotSame(face12, face10);
      assertSame(face12, face11);
      assertNotSame(face12, face9);
      assertNotSame(face12, face7);
      assertSame(face12, face2);
      assertEquals(Type.NORMAL, face2.getType());
      assertEquals(1, (int)face2.getValeur());
      assertNull(face2.getNbLUN());
      assertNull(face2.getNbVICT());
      assertEquals(Ressource.OR, face2.getRes());
      assertNull(face2.getNbOR());
      assertNull(face2.getNbSOL());
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbOR());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbSOL());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbLUN());
      assertEquals(1, (int)face11.getValeur());
      assertEquals(Ressource.OR, face12.getRes());
      assertNull(face12.getNbSOL());
      assertNull(face12.getNbLUN());
      assertEquals(1, (int)face12.getValeur());
      assertNull(face12.getNbOR());
      assertNull(face12.getNbVICT());
      assertEquals(Type.NORMAL, face12.getType());
      
      Face face13 = de0.faceMin();
      assertNotEquals(face13, face5);
      assertNotEquals(face13, face11);
      assertNotEquals(face13, face7);
      assertNotEquals(face13, face1);
      assertNotEquals(face13, face2);
      assertNotEquals(face13, face6);
      assertNotEquals(face13, face10);
      assertNotEquals(face13, face0);
      assertNotEquals(face13, face12);
      assertNotEquals(face13, face4);
      assertNotEquals(face13, face9);
      assertNotEquals(face13, face8);
      assertNotEquals(face13, face3);
      assertNotNull(face13);
      assertNotSame(face13, face5);
      assertNotSame(face13, face11);
      assertNotSame(face13, face7);
      assertNotSame(face13, face1);
      assertNotSame(face13, face2);
      assertNotSame(face13, face6);
      assertNotSame(face13, face10);
      assertNotSame(face13, face0);
      assertNotSame(face13, face12);
      assertNotSame(face13, face4);
      assertNotSame(face13, face9);
      assertNotSame(face13, face8);
      assertNotSame(face13, face3);
      assertNull(face13.getNbVICT());
      assertEquals(Type.NORMAL, face13.getType());
      assertNull(face13.getNbSOL());
      assertEquals(Ressource.OR, face13.getRes());
      assertNull(face13.getNbLUN());
      assertEquals(1, (int)face13.getValeur());
      assertNull(face13.getNbOR());
      
      de0.setFACE(face11);
      assertNotEquals(face11, face0);
      assertNotEquals(face11, face5);
      assertNotEquals(face11, face13);
      assertNotEquals(face11, face10);
      assertNotEquals(face11, face4);
      assertNotEquals(face11, face9);
      assertNotEquals(face11, face7);
      assertNotEquals(face11, face6);
      assertNotEquals(face11, face8);
      assertNotEquals(face11, face1);
      assertNotEquals(face11, face3);
      assertNotSame(face11, face5);
      assertNotSame(face11, face13);
      assertNotSame(face11, face7);
      assertNotSame(face11, face8);
      assertNotSame(face11, face3);
      assertNotSame(face11, face0);
      assertNotSame(face11, face10);
      assertNotSame(face11, face4);
      assertNotSame(face11, face9);
      assertSame(face11, face2);
      assertSame(face11, face12);
      assertNotSame(face11, face6);
      assertNotSame(face11, face1);
      assertNull(face11.getNbVICT());
      assertNull(face11.getNbOR());
      assertEquals(Type.NORMAL, face11.getType());
      assertNull(face11.getNbSOL());
      assertEquals(Ressource.OR, face11.getRes());
      assertNull(face11.getNbLUN());
      assertEquals(1, (int)face11.getValeur());
      
      de0.initDe1();
      Face face14 = de0.faceMin();
      assertNotEquals(face14, face9);
      assertNotEquals(face14, face2);
      assertNotEquals(face14, face0);
      assertNotEquals(face14, face12);
      assertNotEquals(face14, face4);
      assertNotEquals(face14, face11);
      assertNotEquals(face14, face3);
      assertNotEquals(face14, face7);
      assertNotEquals(face14, face8);
      assertNotEquals(face14, face6);
      assertNotEquals(face14, face5);
      assertNotEquals(face14, face13);
      assertNotEquals(face14, face10);
      assertNotEquals(face14, face1);
      assertNotNull(face14);
      assertNotSame(face14, face9);
      assertNotSame(face14, face2);
      assertNotSame(face14, face0);
      assertNotSame(face14, face12);
      assertNotSame(face14, face4);
      assertNotSame(face14, face11);
      assertNotSame(face14, face3);
      assertNotSame(face14, face7);
      assertNotSame(face14, face8);
      assertNotSame(face14, face6);
      assertNotSame(face14, face5);
      assertNotSame(face14, face13);
      assertNotSame(face14, face10);
      assertNotSame(face14, face1);
      assertNull(face14.getNbSOL());
      assertEquals(Ressource.OR, face14.getRes());
      assertEquals(Type.NORMAL, face14.getType());
      assertNull(face14.getNbVICT());
      assertNull(face14.getNbOR());
      assertNull(face14.getNbLUN());
      assertEquals(1, (int)face14.getValeur());
      
      Face face15 = de0.faceMin();
      assertNotEquals(face15, face4);
      assertNotEquals(face15, face10);
      assertNotEquals(face15, face1);
      assertNotEquals(face15, face8);
      assertNotEquals(face15, face9);
      assertNotEquals(face15, face2);
      assertNotEquals(face15, face5);
      assertNotEquals(face15, face13);
      assertNotEquals(face15, face7);
      assertNotEquals(face15, face11);
      assertNotEquals(face15, face3);
      assertNotEquals(face15, face6);
      assertNotEquals(face15, face0);
      assertNotEquals(face15, face12);
      assertNotNull(face15);
      assertNotSame(face15, face4);
      assertNotSame(face15, face10);
      assertNotSame(face15, face1);
      assertNotSame(face15, face8);
      assertNotSame(face15, face9);
      assertNotSame(face15, face2);
      assertNotSame(face15, face5);
      assertNotSame(face15, face13);
      assertNotSame(face15, face7);
      assertSame(face15, face14);
      assertNotSame(face15, face11);
      assertNotSame(face15, face3);
      assertNotSame(face15, face6);
      assertNotSame(face15, face0);
      assertNotSame(face15, face12);
      assertEquals(Type.NORMAL, face15.getType());
      assertEquals(Ressource.OR, face15.getRes());
      assertNull(face15.getNbSOL());
      assertNull(face15.getNbOR());
      assertEquals(1, (int)face15.getValeur());
      assertNull(face15.getNbLUN());
      assertNull(face15.getNbVICT());
      
      de0.setFACE(face8);
      assertNotEquals(face8, face12);
      assertNotEquals(face8, face0);
      assertNotEquals(face8, face10);
      assertNotEquals(face8, face15);
      assertNotEquals(face8, face11);
      assertNotEquals(face8, face4);
      assertNotEquals(face8, face14);
      assertNotEquals(face8, face3);
      assertNotEquals(face8, face13);
      assertNotEquals(face8, face5);
      assertNotEquals(face8, face6);
      assertNotEquals(face8, face2);
      assertNotEquals(face8, face1);
      assertNotSame(face8, face12);
      assertNotSame(face8, face0);
      assertNotSame(face8, face10);
      assertNotSame(face8, face15);
      assertNotSame(face8, face11);
      assertNotSame(face8, face4);
      assertNotSame(face8, face14);
      assertSame(face8, face9);
      assertNotSame(face8, face3);
      assertSame(face8, face7);
      assertNotSame(face8, face13);
      assertNotSame(face8, face5);
      assertNotSame(face8, face6);
      assertNotSame(face8, face2);
      assertNotSame(face8, face1);
      assertNull(face8.getNbOR());
      assertNull(face8.getNbVICT());
      assertEquals(Type.NORMAL, face8.getType());
      assertEquals(Ressource.OR, face8.getRes());
      assertNull(face8.getNbSOL());
      assertNull(face8.getNbLUN());
      assertEquals(1, (int)face8.getValeur());
  }

  @Test(timeout = 4000)
  public void test50() {
      De de0 = new De();
      Face face0 = de0.FACE3;
      de0.FACE5 = null;
      de0.faceMin();
      de0.setFACE(null);
      de0.setFACE(null);
      de0.initDe1();
      de0.initDe2();
      Face face1 = De.compare2Face(de0.FACE5, de0.FACE6);
      Face face2 = de0.faceMin();
      de0.setFACE(face2);
      Face face3 = De.compare2Face(de0.FACE1, de0.FACE2);
      de0.setFACE(face3);
      de0.initDe2();
      de0.setFACE(face2);
      De.compare2Face(face3, face3);
      de0.initDe2();
      de0.getFace();
      de0.faceMin();
      de0.getFace();
      de0.setFACE(face2);
      de0.setFACE(face1);
      De.compare2Face(de0.FACE5, face2);
      de0.setFACE(de0.FACE4);
      de0.initDe2();
      de0.faceMin();
      de0.setFACE(null);
      de0.initDe1();
      Face face4 = de0.faceMin();
      assertEquals(Ressource.OR, face4.getRes());
  }

  @Test(timeout = 4000)
  public void test51() {
      De de0 = new De();
      de0.initDe2();
      de0.FACE5 = de0.FACE6;
      Face face1 = De.compare2Face(de0.FACE5, de0.FACE6);
      De.compare2Face(de0.FACE4, de0.FACE5);
      Face face2 = de0.faceMin();
      de0.FACE2 = face2;
      String string0 = de0.toString();
      assertEquals("\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[33m1 OR\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m\n\u001B[32m2 VICTOIRE\u001B[0m", string0);
      
      Face face3 = De.compare2Face(face2, de0.FACE5);
      de0.setFACE(face3);
      de0.setFACE(face3);
      Face face4 = de0.FACE2;
      Face face5 = De.compare2Face(face1, face4);
      assertSame(face5, face3);
  }

  @Test(timeout = 4000)
  public void test52() {
      De de0 = new De();
      de0.FACE5 = null;
      de0.initDe1();
      de0.initDe1();
      de0.setFACE(de0.FACE1);
      de0.initDe2();
      de0.setFACE(de0.FACE6);
      de0.setFACE(de0.FACE5);
      de0.setFACE(de0.FACE6);
      de0.faceMin();
      De.compare2Face(de0.FACE6, de0.FACE2);
      de0.initDe1();
      de0.initDe2();
      Face face0 = De.compare2Face(de0.FACE1, de0.FACE1);
      assertEquals(1, (int)face0.getValeur());
  }
}
